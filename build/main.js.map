{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["/*\n * Created with @iobroker/create-adapter v2.5.0\n */\n\n// The adapter-core module gives you access to the core ioBroker functions\n// you need to create an adapter\nimport * as utils from '@iobroker/adapter-core';\nimport * as dp from './lib/datapoints';\nimport * as siamanager from './lib/sia';\nimport * as tools from './lib/tools';\n\nclass sia extends utils.Adapter {\n    private onlineCheckAvailable: boolean;\n    private onlineCheckTimeout: ReturnType<typeof this.setTimeout>;\n    private siaclient: any;\n\n    public constructor(options: Partial<utils.AdapterOptions> = {}) {\n        super({\n            ...options,\n            name: 'sia',\n        });\n\n        this.onlineCheckAvailable = false;\n        this.onlineCheckTimeout = undefined;\n        this.on('ready', this.onReady.bind(this));\n        this.on('stateChange', this.onStateChange.bind(this));\n        this.on('objectChange', this.onObjectChange.bind(this));\n        this.on('message', this.onMessage.bind(this));\n        this.on('unload', this.onUnload.bind(this));\n    }\n\n    /**\n     * Is called when databases are connected and adapter received configuration.\n     */\n    private async onReady(): Promise<void> {\n        // await tools.wait(10);\n        await this.setState('info.connection', { val: true, ack: true });\n        this.subscribeStates('*');\n        this.log.info(`Starting Adapter ${this.namespace} in version ${this.version}`);\n        // delete not used / missing object in configuration\n        await this.deleteObjects();\n        // add object from configuration.\n        await this.createObjects();\n        const accounts: siamanager.ifaccount[] = this.config.keys as any;\n        try {\n            this.siaclient = new siamanager.sia({\n                accounts: accounts,\n                timeout: this.config.timeout,\n                host: this.config.bind,\n                port: this.config.port,\n                adapter: this,\n            });\n            this.siaclient.serverStartTCP();\n            this.siaclient.serverStartUDP();\n        } catch (err) {\n            this.log.error(`Error (1): ${tools.getErrorMessage(err)}`);\n        }\n        this.siaclient.on('sia', async (sia: siamanager.ifsia, err: any) => {\n            if (sia) {\n                try {\n                    await this.setStatesSIA(sia);\n                } catch (err) {\n                    this.log.error(`Error (2): ${tools.getErrorMessage(err)}`);\n                }\n            }\n            if (err) {\n                this.log.error(`Error (3): ${err}`);\n            }\n        });\n        this.siaclient.on('data', async (data: any) => {\n            if (data) {\n                this.log.debug(`Data: ${JSON.stringify(data)}`);\n            }\n        });\n    }\n\n    /**\n     * Is called when adapter shuts down - callback has to be called under any circumstances!\n     *\n     * @param callback calback function\n     */\n    private async onUnload(callback: () => void): Promise<void> {\n        try {\n            this.log.info(`Stopping sia processes, please wait!`);\n            await this.setState('info.connection', { val: false, ack: true });\n            callback();\n        } catch (err) {\n            this.log.error(`Error: ${tools.getErrorMessage(err)}`);\n            callback();\n        }\n    }\n\n    /**\n     * Is called if a subscribed object changes\n     *\n     * @param id id of the object\n     * @param obj object\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    private async onObjectChange(id: string, obj: ioBroker.Object | null | undefined): Promise<void> {\n        // const sia = await Lupus.getInstance(this);\n        // await sia.onObjectChange(id, obj);\n    }\n\n    /**\n     * Is called if a subscribed state changes\n     *\n     * @param id id of state\n     * @param state state\n     */\n    private async onStateChange(id: string, state: ioBroker.State | null | undefined): Promise<void> {\n        if (state && !state.ack) {\n            const stateId = id.replace(`${this.namespace}.`, '');\n        }\n    }\n\n    /**\n     * Some message was sent to this instance over message box. Used by email, pushover, text2speech, ...\n     * Using this method requires \"common.messagebox\" property to be set to true in io-package.json\n     *\n     * @param obj object\n     */\n    private async onMessage(obj: ioBroker.Message): Promise<void> {\n        if (typeof obj === 'object' && obj.message) {\n            switch (obj.command) {\n                case 'dial': {\n                    break;\n                }\n                default:\n                    this.log.error(`Unknown comannd ${obj.command} in onMessage`);\n                    break;\n            }\n        }\n    }\n\n    /**\n     * convert subcriber to ID for using as channel name. Special characters and spaces are deleted.\n     *\n     * @param accountnumber - accountnumber\n     */\n    private getAcountNumberID(accountnumber: string): string {\n        const id = accountnumber.replace(/[.\\s]+/g, '_');\n        return id;\n    }\n\n    public async deleteObjects(): Promise<void> {\n        try {\n            await this.getAdapterObjects((obj: any) => {\n                for (const idx in obj) {\n                    if (!idx.startsWith(`${this.namespace}.accounts.`) || obj[idx].type !== 'channel') {\n                        continue;\n                    }\n                    let found = false;\n                    for (const key of this.config.keys as any) {\n                        const idkey = `${this.namespace}.accounts.${this.getAcountNumberID(key.accountnumber)}`;\n                        if (idx === idkey) {\n                            found = true;\n                            break;\n                        }\n                    }\n                    if (found === false) {\n                        const id = idx.replace('${this.adapter.namespace}.', '');\n                        this.log.debug(`Deleting object ${idx} recursive`);\n                        this.delObject(id, { recursive: true });\n                    }\n                }\n            });\n        } catch (err) {\n            throw new Error(`Could not delte objects ${tools.getErrorMessage(err)}`);\n        }\n    }\n\n    /**\n     * read configuration, and create for all subscribers a channel and states\n     */\n    public async createObjects(): Promise<void> {\n        for (const key of this.config.keys as any) {\n            const id = `accounts.${this.getAcountNumberID(key.accountnumber)}`;\n            const obj = dp.dpSIA || {};\n            const ret = await this.setObjectNotExists(id, {\n                type: 'channel',\n                common: {\n                    name: key.accountnumber,\n                },\n                native: {},\n            });\n            if (ret) {\n                this.log.debug(`Create object ${id}`);\n            }\n            for (const prop in obj) {\n                const sid = `${id}.${prop}`;\n                const parameter = JSON.parse(JSON.stringify(obj[prop]));\n                parameter.name = `${key.accountnumber} - ${parameter.name}`;\n                const ret = await this.setObjectNotExists(sid, {\n                    type: 'state',\n                    common: parameter,\n                    native: {},\n                });\n                if (ret) {\n                    this.log.debug(`Create object ${sid}`);\n                }\n            }\n        }\n    }\n\n    /**\n     * Set state for SIA message\n     *\n     * @param sia - SIA Message\n     */\n    private async setStatesSIA(sia: siamanager.ifsia): Promise<void> {\n        const obj = dp.dpSIA || {};\n        let val: any = undefined;\n        if (!sia?.act) {\n            return;\n        }\n        this.log.debug(`setStatesSIA for ${sia.act} : ${JSON.stringify(sia)}`);\n        const id = `accounts.${this.getAcountNumberID(sia.act)}`;\n        if (!(await this.objectExists(id))) {\n            return;\n        }\n        for (const prop in obj) {\n            const sid = `${id}.${prop}`;\n            switch (prop) {\n                case 'id':\n                    val = sia.id;\n                    break;\n                case 'sequence':\n                    val = sia.seq;\n                    break;\n                case 'rpref':\n                    val = sia.rpref;\n                    break;\n                case 'lpref':\n                    val = sia.lpref;\n                    break;\n                case 'accountnumber':\n                    val = sia.act;\n                    break;\n                case 'msgdata':\n                    val = sia.data_message;\n                    break;\n                case 'extdata':\n                    val = sia.data_extended;\n                    break;\n                case 'ts':\n                    val = sia.ts;\n                    break;\n                case 'crc':\n                    val = sia.crc;\n                    break;\n                case 'len':\n                    val = sia.len;\n                    break;\n                default:\n                    val = undefined;\n            }\n            this.log.debug(`ackSIA : set state for id ${sid} with value ${val}`);\n            await this.setState(sid, {\n                val: val,\n                ack: true,\n            });\n        }\n    }\n}\n\nif (require.main !== module) {\n    // Export the constructor in compact mode\n    module.exports = (options: Partial<utils.AdapterOptions> | undefined) => new sia(options);\n} else {\n    // otherwise start the instance directly\n    (() => new sia())();\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;AAMA,YAAuB;AACvB,SAAoB;AACpB,iBAA4B;AAC5B,YAAuB;AAEvB,MAAM,YAAY,MAAM,QAAQ;AAAA,EACpB;AAAA,EACA;AAAA,EACA;AAAA,EAED,YAAY,UAAyC,CAAC,GAAG;AAC5D,UAAM;AAAA,MACF,GAAG;AAAA,MACH,MAAM;AAAA,IACV,CAAC;AAED,SAAK,uBAAuB;AAC5B,SAAK,qBAAqB;AAC1B,SAAK,GAAG,SAAS,KAAK,QAAQ,KAAK,IAAI,CAAC;AACxC,SAAK,GAAG,eAAe,KAAK,cAAc,KAAK,IAAI,CAAC;AACpD,SAAK,GAAG,gBAAgB,KAAK,eAAe,KAAK,IAAI,CAAC;AACtD,SAAK,GAAG,WAAW,KAAK,UAAU,KAAK,IAAI,CAAC;AAC5C,SAAK,GAAG,UAAU,KAAK,SAAS,KAAK,IAAI,CAAC;AAAA,EAC9C;AAAA;AAAA;AAAA;AAAA,EAKA,MAAc,UAAyB;AAEnC,UAAM,KAAK,SAAS,mBAAmB,EAAE,KAAK,MAAM,KAAK,KAAK,CAAC;AAC/D,SAAK,gBAAgB,GAAG;AACxB,SAAK,IAAI,KAAK,oBAAoB,KAAK,SAAS,eAAe,KAAK,OAAO,EAAE;AAE7E,UAAM,KAAK,cAAc;AAEzB,UAAM,KAAK,cAAc;AACzB,UAAM,WAAmC,KAAK,OAAO;AACrD,QAAI;AACA,WAAK,YAAY,IAAI,WAAW,IAAI;AAAA,QAChC;AAAA,QACA,SAAS,KAAK,OAAO;AAAA,QACrB,MAAM,KAAK,OAAO;AAAA,QAClB,MAAM,KAAK,OAAO;AAAA,QAClB,SAAS;AAAA,MACb,CAAC;AACD,WAAK,UAAU,eAAe;AAC9B,WAAK,UAAU,eAAe;AAAA,IAClC,SAAS,KAAK;AACV,WAAK,IAAI,MAAM,cAAc,MAAM,gBAAgB,GAAG,CAAC,EAAE;AAAA,IAC7D;AACA,SAAK,UAAU,GAAG,OAAO,OAAOA,MAAuB,QAAa;AAChE,UAAIA,MAAK;AACL,YAAI;AACA,gBAAM,KAAK,aAAaA,IAAG;AAAA,QAC/B,SAASC,MAAK;AACV,eAAK,IAAI,MAAM,cAAc,MAAM,gBAAgBA,IAAG,CAAC,EAAE;AAAA,QAC7D;AAAA,MACJ;AACA,UAAI,KAAK;AACL,aAAK,IAAI,MAAM,cAAc,GAAG,EAAE;AAAA,MACtC;AAAA,IACJ,CAAC;AACD,SAAK,UAAU,GAAG,QAAQ,OAAO,SAAc;AAC3C,UAAI,MAAM;AACN,aAAK,IAAI,MAAM,SAAS,KAAK,UAAU,IAAI,CAAC,EAAE;AAAA,MAClD;AAAA,IACJ,CAAC;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAc,SAAS,UAAqC;AACxD,QAAI;AACA,WAAK,IAAI,KAAK,sCAAsC;AACpD,YAAM,KAAK,SAAS,mBAAmB,EAAE,KAAK,OAAO,KAAK,KAAK,CAAC;AAChE,eAAS;AAAA,IACb,SAAS,KAAK;AACV,WAAK,IAAI,MAAM,UAAU,MAAM,gBAAgB,GAAG,CAAC,EAAE;AACrD,eAAS;AAAA,IACb;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,MAAc,eAAe,IAAY,KAAwD;AAAA,EAGjG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,MAAc,cAAc,IAAY,OAAyD;AAC7F,QAAI,SAAS,CAAC,MAAM,KAAK;AACrB,YAAM,UAAU,GAAG,QAAQ,GAAG,KAAK,SAAS,KAAK,EAAE;AAAA,IACvD;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,MAAc,UAAU,KAAsC;AAC1D,QAAI,OAAO,QAAQ,YAAY,IAAI,SAAS;AACxC,cAAQ,IAAI,SAAS;AAAA,QACjB,KAAK,QAAQ;AACT;AAAA,QACJ;AAAA,QACA;AACI,eAAK,IAAI,MAAM,mBAAmB,IAAI,OAAO,eAAe;AAC5D;AAAA,MACR;AAAA,IACJ;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOQ,kBAAkB,eAA+B;AACrD,UAAM,KAAK,cAAc,QAAQ,WAAW,GAAG;AAC/C,WAAO;AAAA,EACX;AAAA,EAEA,MAAa,gBAA+B;AACxC,QAAI;AACA,YAAM,KAAK,kBAAkB,CAAC,QAAa;AACvC,mBAAW,OAAO,KAAK;AACnB,cAAI,CAAC,IAAI,WAAW,GAAG,KAAK,SAAS,YAAY,KAAK,IAAI,GAAG,EAAE,SAAS,WAAW;AAC/E;AAAA,UACJ;AACA,cAAI,QAAQ;AACZ,qBAAW,OAAO,KAAK,OAAO,MAAa;AACvC,kBAAM,QAAQ,GAAG,KAAK,SAAS,aAAa,KAAK,kBAAkB,IAAI,aAAa,CAAC;AACrF,gBAAI,QAAQ,OAAO;AACf,sBAAQ;AACR;AAAA,YACJ;AAAA,UACJ;AACA,cAAI,UAAU,OAAO;AACjB,kBAAM,KAAK,IAAI,QAAQ,8BAA8B,EAAE;AACvD,iBAAK,IAAI,MAAM,mBAAmB,GAAG,YAAY;AACjD,iBAAK,UAAU,IAAI,EAAE,WAAW,KAAK,CAAC;AAAA,UAC1C;AAAA,QACJ;AAAA,MACJ,CAAC;AAAA,IACL,SAAS,KAAK;AACV,YAAM,IAAI,MAAM,2BAA2B,MAAM,gBAAgB,GAAG,CAAC,EAAE;AAAA,IAC3E;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA,EAKA,MAAa,gBAA+B;AACxC,eAAW,OAAO,KAAK,OAAO,MAAa;AACvC,YAAM,KAAK,YAAY,KAAK,kBAAkB,IAAI,aAAa,CAAC;AAChE,YAAM,MAAM,GAAG,SAAS,CAAC;AACzB,YAAM,MAAM,MAAM,KAAK,mBAAmB,IAAI;AAAA,QAC1C,MAAM;AAAA,QACN,QAAQ;AAAA,UACJ,MAAM,IAAI;AAAA,QACd;AAAA,QACA,QAAQ,CAAC;AAAA,MACb,CAAC;AACD,UAAI,KAAK;AACL,aAAK,IAAI,MAAM,iBAAiB,EAAE,EAAE;AAAA,MACxC;AACA,iBAAW,QAAQ,KAAK;AACpB,cAAM,MAAM,GAAG,EAAE,IAAI,IAAI;AACzB,cAAM,YAAY,KAAK,MAAM,KAAK,UAAU,IAAI,IAAI,CAAC,CAAC;AACtD,kBAAU,OAAO,GAAG,IAAI,aAAa,MAAM,UAAU,IAAI;AACzD,cAAMC,OAAM,MAAM,KAAK,mBAAmB,KAAK;AAAA,UAC3C,MAAM;AAAA,UACN,QAAQ;AAAA,UACR,QAAQ,CAAC;AAAA,QACb,CAAC;AACD,YAAIA,MAAK;AACL,eAAK,IAAI,MAAM,iBAAiB,GAAG,EAAE;AAAA,QACzC;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAc,aAAaF,MAAsC;AAC7D,UAAM,MAAM,GAAG,SAAS,CAAC;AACzB,QAAI,MAAW;AACf,QAAI,EAACA,QAAA,gBAAAA,KAAK,MAAK;AACX;AAAA,IACJ;AACA,SAAK,IAAI,MAAM,oBAAoBA,KAAI,GAAG,MAAM,KAAK,UAAUA,IAAG,CAAC,EAAE;AACrE,UAAM,KAAK,YAAY,KAAK,kBAAkBA,KAAI,GAAG,CAAC;AACtD,QAAI,CAAE,MAAM,KAAK,aAAa,EAAE,GAAI;AAChC;AAAA,IACJ;AACA,eAAW,QAAQ,KAAK;AACpB,YAAM,MAAM,GAAG,EAAE,IAAI,IAAI;AACzB,cAAQ,MAAM;AAAA,QACV,KAAK;AACD,gBAAMA,KAAI;AACV;AAAA,QACJ,KAAK;AACD,gBAAMA,KAAI;AACV;AAAA,QACJ,KAAK;AACD,gBAAMA,KAAI;AACV;AAAA,QACJ,KAAK;AACD,gBAAMA,KAAI;AACV;AAAA,QACJ,KAAK;AACD,gBAAMA,KAAI;AACV;AAAA,QACJ,KAAK;AACD,gBAAMA,KAAI;AACV;AAAA,QACJ,KAAK;AACD,gBAAMA,KAAI;AACV;AAAA,QACJ,KAAK;AACD,gBAAMA,KAAI;AACV;AAAA,QACJ,KAAK;AACD,gBAAMA,KAAI;AACV;AAAA,QACJ,KAAK;AACD,gBAAMA,KAAI;AACV;AAAA,QACJ;AACI,gBAAM;AAAA,MACd;AACA,WAAK,IAAI,MAAM,6BAA6B,GAAG,eAAe,GAAG,EAAE;AACnE,YAAM,KAAK,SAAS,KAAK;AAAA,QACrB;AAAA,QACA,KAAK;AAAA,MACT,CAAC;AAAA,IACL;AAAA,EACJ;AACJ;AAEA,IAAI,QAAQ,SAAS,QAAQ;AAEzB,SAAO,UAAU,CAAC,YAAuD,IAAI,IAAI,OAAO;AAC5F,OAAO;AAEH,GAAC,MAAM,IAAI,IAAI,GAAG;AACtB;",
  "names": ["sia", "err", "ret"]
}

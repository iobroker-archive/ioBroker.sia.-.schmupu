{
  "version": 3,
  "sources": ["../../src/lib/sia.ts"],
  "sourcesContent": ["import crypto from 'crypto';\nimport dgram from 'dgram';\nimport { EventEmitter } from 'events';\nimport net from 'net';\nimport * as tools from './tools';\n\n/**\n * Interface account\n */\nexport interface ifaccount {\n    /** accountnumber */\n    accountnumber: string;\n    /** aes password */\n    password: any;\n    /** aes paswoord in hex ascii format */\n    hex: boolean;\n    /** use aes pasword */\n    aes: boolean;\n}\n\n/**\n * SIA Message\n */\nexport interface ifsia {\n    /** ID Token (required) */\n    id: string;\n    /** Sequence: 4 ASCII digits (required) */\n    seq: string;\n    /** Receiver Number: 1-6 HEX ASCII digit (optional) */\n    rpref?: string;\n    /** Account Prefix: 1-6 HEX ASCII digits (required) */\n    lpref: string;\n    /** Account Number: 3-16 HEX ASCII characters (required) */\n    act: string;\n    /** Message  ASCII data consistent with ID token (required) */\n    data_message: string;\n    /** Exteded message ASCII data (optional) */\n    data_extended?: string;\n    /** timestamp ASCII in format: HH:MM:SS,MM-DD-YYYY (optional) */\n    ts?: string;\n    /** CRC - 4 HEX ASCII digits (required) */\n    crc: string;\n    /** Length - 4 HEX ASCII digits (required) */\n    len: string;\n\n    /** Data message: Buffer or String (required) */\n    data: Buffer;\n    /** calculated CRC - 4 HEX ASCII digits (optional) */\n    calc_crc: string;\n    /** calculated Length - 4 HEX ASCII digits (optional) */\n    calc_len: string;\n    /** Forma bin or hex (optional) */\n    crcformat: string;\n    /** message (optional) */\n    str: string;\n}\n\n/**\n * SIA Class\n */\nexport class sia extends EventEmitter {\n    private timeout: number;\n    private accounts: ifaccount[];\n    private port: number;\n    private host: string;\n    private logger: any;\n    private serverudp: dgram.Socket;\n    private servertcp: net.Server;\n\n    /**\n     * Constructor\n     *\n     * @param parameter parameter\n     * @param parameter.timeout timeout\n     * @param parameter.host bind host\n     * @param parameter.port bind port\n     * @param parameter.logger logger\n     */\n    constructor(parameter: { timeout?: number; host: string; port: number; logger?: any }) {\n        super();\n        this.timeout = parameter.timeout === undefined ? 10 : parameter.timeout;\n        this.host = parameter.host;\n        this.port = parameter.port;\n        this.accounts = [];\n        if (parameter.logger) {\n            this.logger = {\n                info: parameter.logger.info ? parameter.logger.info : parameter.logger,\n                debug: parameter.logger.debug ? parameter.logger.debug : parameter.logger,\n                error: parameter.logger.error ? parameter.logger.error : parameter.logger,\n            };\n        }\n        this.serverudp = dgram.createSocket('udp4');\n        this.servertcp = net.createServer();\n    }\n\n    /**\n     * Set accounts\n     *\n     * @param accounts accounts\n     */\n    public setAccounts(accounts: ifaccount[]): void {\n        this.accounts = accounts;\n        for (const account of this.accounts) {\n            if (!tools.isHexString(account.accountnumber)) {\n                throw new Error(\n                    `Accountnumber ${account.accountnumber} not allowed. Use only following characters 0-9 and A-F`,\n                );\n            }\n            if (account.accountnumber.length < 3 || account.accountnumber.length > 16) {\n                throw new Error(`Accountnumber ${account.accountnumber} only 3 to 16 characters allowed.`);\n            }\n            if (account.aes === true) {\n                if (account.hex === true) {\n                    account.password = Buffer.from(account.password, 'hex');\n                }\n                const len = account.password.length;\n                // Password for AES is not allowed to be longer than 16, 24 and 32 characters\n                if (len !== 16 && len !== 24 && len !== 32) {\n                    throw new Error(\n                        `Password for accountnumber ${account.accountnumber} must be 16, 24 or 32 Byte or 32, 48 or 64 Hex long`,\n                    );\n                }\n            }\n        }\n        if (this.accounts.length === 0) {\n            throw new Error(`Accounts are missing!`);\n        }\n    }\n\n    /**\n     * convert ASCII Text -> BYTES\n     *\n     * @param text string in ASCII format\n     */\n    private getBytes(text: string): any {\n        const bytes = [];\n        for (let i = 0; i < text.length; i++) {\n            const charCode = text.charCodeAt(i);\n            const cLen = Math.ceil(Math.log(charCode) / Math.log(256));\n            for (let j = 0; j < cLen; j++) {\n                bytes.push((charCode << (j * 8)) & 0xff);\n            }\n        }\n        return bytes;\n    }\n\n    /**\n     * Padding  /  str = customPadding(str, 16, 0x0, \"hex\"); // magic happens here\n     *\n     * @param str -\n     * @param bytelen -\n     * @param padder -\n     * @param format -\n     */\n    private customPadding(str: string, bytelen: number, padder: any, format: any): string {\n        const blockSize = bytelen * 16;\n        str = Buffer.from(str, 'utf8').toString(format);\n        //1 char = 8bytes\n        const bitLength = str.length * 8;\n        if (bitLength < blockSize) {\n            for (let i = bitLength; i < blockSize; i += 8) {\n                str += padder;\n            }\n        } else if (bitLength > blockSize) {\n            while ((str.length * 8) % blockSize != 0) {\n                str += padder;\n            }\n        }\n        return Buffer.from(str, format).toString('utf8');\n    }\n\n    /**\n     *  Encrypt / Input: ASCII , Output: HEX\n     *\n     * @param password - key / password for decrypting message\n     * @param decrypted - messages for encrypting\n     */\n    private encrypt_hex(password: string, decrypted: any): string {\n        try {\n            const iv = Buffer.alloc(16);\n            iv.fill(0);\n            let aes;\n            switch (password.length) {\n                case 16:\n                    aes = 'aes-128-cbc';\n                    break;\n                case 24:\n                    aes = 'aes-192-cbc';\n                    break;\n                case 32:\n                    aes = 'aes-256-cbc';\n                    break;\n                default:\n                    throw new Error(`Could not encrypt to hex. Wrong password length.`);\n            }\n            // Creating Cipheriv with its parameter\n            const cipher = crypto.createCipheriv(aes, password, iv);\n            // cipher.setAutoPadding(false);\n            let encrypt = cipher.update(decrypted);\n            encrypt = Buffer.concat([encrypt, cipher.final()]);\n            return encrypt.toString('hex');\n        } catch (err) {\n            throw new Error(`Could not encrypt message`, { cause: err });\n        }\n    }\n\n    /**\n     * Decrypt messages\n     *\n     * @param password - key / password for decrypting message\n     * @param encrypted encrypted password\n     * @returns decrypted messsag in hex format\n     */\n    private decrypt_hex(password: string, encrypted: any): string {\n        try {\n            const iv = Buffer.alloc(16);\n            iv.fill(0);\n            let aes;\n            //  password = customPadding(password, 24, 0x0, \"hex\"); // magic happens here\n            switch (password.length) {\n                case 16:\n                    aes = 'aes-128-cbc';\n                    break;\n                case 24:\n                    aes = 'aes-192-cbc';\n                    break;\n                case 32:\n                    aes = 'aes-256-cbc';\n                    break;\n                default:\n                    throw new Error(`Could not decrypt from hex. Wrong password length.`);\n            }\n            const decipher = crypto.createDecipheriv(aes, password, iv);\n            decipher.setAutoPadding(false);\n            let decrypt = decipher.update(encrypted, 'hex', 'utf-8');\n            decrypt += decipher.final('utf-8');\n            return decrypt;\n        } catch (err) {\n            throw new Error(`Could not decrypt message`, { cause: err });\n        }\n    }\n\n    /**\n     * get timestamp in GMT in following format <HH:MM:SS,MM-DD-YYYY>\n     *\n     * @returns timestamp as strng\n     */\n    private getSIATimestampFromUTCDateNow(): string {\n        const date = new Date();\n        const hours = String(date.getUTCHours()).padStart(2, '0');\n        const minutes = String(date.getUTCMinutes()).padStart(2, '0');\n        const seconds = String(date.getUTCSeconds()).padStart(2, '0');\n        const month = String(date.getUTCMonth() + 1).padStart(2, '0'); // Monate sind 0-basiert\n        const day = String(date.getUTCDate()).padStart(2, '0');\n        const year = date.getUTCFullYear();\n        /** GMT Date */\n        return `${hours}:${minutes}:${seconds},${month}-${day}-${year}`;\n    }\n\n    /**\n     * you get local Timen from GMT timestamp in format <HH:MM:SS,MM-DD-YYYY>\n     *\n     * @param ts date string in format HH:MM:SS,MM-DD-YYY\n     * @returns localtime as Date\n     */\n    private getUTCDateFromSIATimestamp(ts: string): Date {\n        const [timePart, datePart] = ts.split(',');\n        const [hours, minutes, seconds] = timePart.split(':').map(Number);\n        const [month, day, year] = datePart.split('-').map(Number);\n        // Erstellen des GMT-Datums (Monate in JS sind 0-basiert)\n        const gmtDate = new Date(Date.UTC(year, month - 1, day, hours, minutes, seconds));\n        /** returns gmt date */\n        return gmtDate;\n    }\n\n    /**\n     * Is SIA Message in timerange (for example +20 or -40 seconds)\n     *\n     * @param ts1 date string in format HH:MM:SS,MM-DD-YYY\n     * @param ts2 date string in format HH:MM:SS,MM-DD-YYY\n     * @returns true if timestamp in range, else false\n     */\n    private isInTime(ts1: string, ts2?: string): boolean {\n        if (!ts1 || ts1.length === 0) {\n            return true;\n        }\n        /** time from sia message */\n        const date_ts1 = this.getUTCDateFromSIATimestamp(ts1);\n        /** gmt time */\n        ts2 = ts2 && ts2.length > 0 ? ts2 : this.getSIATimestampFromUTCDateNow();\n        const date_ts2 = this.getUTCDateFromSIATimestamp(ts2);\n        this.logger && this.logger.debug(`Timestamp date_ts: ${date_ts1.toLocaleString()}`);\n        this.logger && this.logger.debug(`Timestamp date_now: ${date_ts2.toLocaleString()}`);\n        /** diference in seconds */\n        const diff = Math.abs((date_ts2.valueOf() - date_ts1.valueOf()) / 1000);\n        if (this.timeout > 0 && diff > this.timeout) {\n            return false;\n        }\n        return true;\n    }\n\n    /**\n     * get Account from config\n     *\n     * @param act accountnummber\n     * @returns account\n     */\n    private getAccountInfo(act: string): ifaccount {\n        for (let i = 0; i < this.accounts.length; i++) {\n            const key = this.accounts[i];\n            if (key.accountnumber === act) {\n                return key;\n            }\n        }\n        throw new Error(`Acoocunt ${act} unknown. Not found in configuratin!`);\n    }\n\n    /**\n     * SIA Message was not succesfull, create NAK\n     *\n     * @param data message\n     * @returns NAK Message\n     */\n    public createNACK(data: Buffer): Buffer {\n        const ts = this.getSIATimestampFromUTCDateNow(); // tiemstamp\n        const str = `\"NAK\"` + `0000` + `R0` + `L0` + `A0` + `[]_${ts}`;\n        const crc = this.crc16str(str);\n        const len = str.length;\n        const crchex = `0000${crc.toString(16)}`.slice(-4).toUpperCase();\n        const lenhex = `0000${len.toString(16)}`.slice(-4).toUpperCase();\n        const start = Buffer.from([0x0a]);\n        const end = Buffer.from([0x0d]);\n        let crcbuf;\n        const crcformat = this.getcrcFormat(data);\n        switch (crcformat) {\n            case 'bin':\n                /** Lupusec sends in 2 bin instead of 4 hex */\n                crcbuf = Buffer.from([(crc >>> 8) & 0xff, crc & 0xff]);\n                this.logger && this.logger.debug(`Created NAK : <0x0A><0x${crchex}>${lenhex}${str}<0x0D>`);\n                break;\n            case 'hex':\n                crcbuf = Buffer.from(crchex);\n                this.logger && this.logger.debug(`Created NAK : <0x0A>${crchex}${lenhex}${str}<0x0D>`);\n                break;\n            default:\n                /** Empty message */\n                crcbuf = Buffer.from('');\n                this.logger && this.logger.error(`Created NAK : <0x0A><0x0D>`);\n                break;\n        }\n        const lenbuf = Buffer.from(lenhex);\n        const buf = Buffer.from(str);\n        const nack = Buffer.concat([start, crcbuf, lenbuf, buf, end]);\n        this.logger && this.logger.debug(`createNACK : ${JSON.stringify(nack)}`);\n        return nack;\n    }\n\n    /**\n     * Craete Acknowledge for SIA\n     *\n     * @param sia - SIA Message\n     * @returns ack message\n     */\n    public createACK(sia: ifsia): Buffer {\n        if (!sia) {\n            throw new Error(`Could not create ACK for message!`);\n        }\n        /** get timestamp now */\n        const ts = this.getSIATimestampFromUTCDateNow();\n        const cfg = this.getAccountInfo(sia.act);\n        if (!cfg) {\n            throw new Error(`Could not create ACK. Accountnumber ${sia.act} missing in the configuration`);\n        }\n        /** if timestamp not set, the message is in time (noch check needed) */\n        const intime = sia.ts && sia.ts.length > 0 ? this.isInTime(sia.ts, ts) : true;\n        this.logger && this.logger.debug(`createACK (cfg) : ${JSON.stringify(cfg)}`);\n        this.logger && this.logger.debug(`createACK (sia) : ${JSON.stringify(sia)}`);\n        let str = '';\n        if (!intime) {\n            throw new Error(`Could not create ACK. Message to old (timestamp msg: ${sia.ts}, timestamp now: ${ts})`);\n        }\n        if (sia.calc_len != sia.len) {\n            throw new Error(`Could not create ACK. Length of message is not correct!`);\n        }\n        if (sia.calc_crc != sia.crc) {\n            throw new Error(`Could not create ACK. CRC of message is not correct!`);\n        }\n        const rpref = sia.rpref && sia.rpref.length > 0 ? `R${sia.rpref}` : '';\n        const lpref = sia.lpref && sia.lpref.length > 0 ? `L${sia.lpref}` : '';\n        switch (sia.id) {\n            case '*SIA-DCS':\n            case '*ADM-CID': {\n                if (!cfg.aes || !cfg.password) {\n                    throw new Error(\n                        `Could not create ACK. Could not encrypt message, because AES encrypting disabled or password is missing for ${cfg.accountnumber}`,\n                    );\n                }\n                const msglen = `|]_${ts}`.length;\n                const padlen = 16 - (msglen % 16);\n                const pad = Buffer.alloc(padlen, 0x00);\n                const msg = this.encrypt_hex(cfg.password, `${pad.toString()}|]_${ts}`);\n                str = `\"*ACK\"${sia.seq}${rpref}${lpref}#${sia.act}[${msg}`;\n                break;\n            }\n            case 'SIA-DCS':\n            case 'ADM-CID': {\n                str = `\"ACK\"${sia.seq}${rpref}${lpref}#${sia.act}[]`;\n                break;\n            }\n            default:\n                break;\n        }\n        const crc = this.crc16str(str);\n        const len = str.length;\n        const crchex = `0000${crc.toString(16)}`.slice(-4).toUpperCase();\n        const lenhex = `0000${len.toString(16)}`.slice(-4).toUpperCase();\n        const start = Buffer.from([0x0a]);\n        const end = Buffer.from([0x0d]);\n        let crcbuf;\n        switch (sia?.crcformat) {\n            case 'bin':\n                /* Lupusec sends in 2 bin instead of 4 hex */\n                crcbuf = Buffer.from([(crc >>> 8) & 0xff, crc & 0xff]);\n                this.logger && this.logger.debug(`Created ACK : <0x0A><0x${crchex}>${lenhex}${str}<0x0D>`);\n                break;\n            case 'hex':\n                crcbuf = Buffer.from(crchex);\n                this.logger && this.logger.debug(`Created ACK : <0x0A>${crchex}${lenhex}${str}<0x0D>`);\n                break;\n            default:\n                throw new Error(`Could not create ACK for message. Message not in BIN or HEX foramt!`);\n                break;\n        }\n        const lenbuf = Buffer.from(lenhex);\n        const buf = Buffer.from(str);\n        const ack = Buffer.concat([start, crcbuf, lenbuf, buf, end]);\n        this.logger && this.logger.debug(`createACK : ${JSON.stringify(ack)}`);\n        return ack;\n    }\n\n    /**\n     * Convert Byte to Hex String\n     *\n     * @param uint8arr - btyte buffer\n     * @returns conveerted string\n     */\n    private byteToHexString(uint8arr: any): any {\n        if (!uint8arr) {\n            return '';\n        }\n        let hexStr = '';\n        for (let i = 0; i < uint8arr.length; i++) {\n            let hex = (uint8arr[i] & 0xff).toString(16);\n            hex = hex.length === 1 ? `0${hex}` : hex;\n            hexStr += hex;\n        }\n        return hexStr.toUpperCase();\n    }\n\n    /**\n     * SIA CRC Format\n     *\n     * @param data - CRC\n     * @returns crc format\n     */\n    private getcrcFormat(data: Buffer): string {\n        if (data) {\n            // Check if CRC 2 Byte Binary or 4 Byte HEX\n            if (data[5] == '0'.charCodeAt(0) && data[9] == '\"'.charCodeAt(0)) {\n                return 'hex';\n            }\n            // Lupusec sends the CRC in binary forum\n            if (data[3] == '0'.charCodeAt(0) && data[7] == '\"'.charCodeAt(0)) {\n                return 'bin';\n            }\n        }\n        return '';\n    }\n\n    /**\n     * delete 0x00 at the end of the buffer\n     *\n     * @param data - string buffer\n     * @returns strng without 0x00\n     */\n    private deleteAppendingZero(data: Buffer): Buffer {\n        if (data) {\n            for (let i = data.length - 1; i > 0; i--) {\n                if (data[i] === 0x00) {\n                    data = data.subarray(0, i);\n                } else {\n                    break;\n                }\n            }\n        }\n        return data;\n    }\n\n    /**\n     * parse SIA message (https://dc09gen.northlat.com/)\n     *\n     * @param data - SIA Message\n     * @returns parsed sia data\n     */\n    public parseSIA(data: Buffer): ifsia {\n        data = this.deleteAppendingZero(data);\n        const datalen = data.length - 1;\n        if (!data || data[0] !== 0x0a || data[datalen] !== 0x0d) {\n            throw new Error(`Receive message ${data?.toString()} is corrupted.`);\n        }\n        const crcformat = this.getcrcFormat(data);\n        let str = '';\n        let len = '';\n        let crc = '';\n        switch (crcformat) {\n            case 'hex':\n                /** Check if CRC 2 Byte Binary or 4 Byte HEX */\n                str = Buffer.from(data.subarray(9, datalen)).toString();\n                len = data.subarray(5, 9).toString().toUpperCase();\n                crc = data.subarray(1, 5).toString().toUpperCase();\n                this.logger && this.logger.debug(`SIA Message : <0x0A>${crc}${len}${str?.toString()}<0x0D>`);\n                break;\n            case 'bin':\n                /** Lupusec sends the CRC in binary form */\n                str = Buffer.from(data.subarray(7, datalen)).toString();\n                len = `0000${data.subarray(3, 7).toString()}`.slice(-4).toUpperCase();\n                crc = `0000${(data[1] * 256 + data[2]).toString(16)}`.slice(-4).toUpperCase();\n                /** Lupusec sends in 2 bin instead of 4 hex */\n                this.logger && this.logger.debug(`SIA Message : <0x0A><0x${crc}>${len}${str?.toString()}<0x0D>`);\n                break;\n            default:\n                throw new Error(`Could not parse SIA message. Message not in BIN or HEX format!`);\n        }\n        if (str.length === 0) {\n            throw new Error(`Could not parse SIA message. Message corupted`);\n        }\n        const calc_len = `0000${str.length.toString(16)}`.slice(-4).toUpperCase();\n        const calc_crc = `0000${this.crc16str(str).toString(16)}`.slice(-4).toUpperCase();\n        if (calc_len != len) {\n            throw new Error(`Could not parse SIA message. Length of message is not correct!`);\n        }\n        if (calc_crc != crc) {\n            throw new Error(`Could not parse SIA message. CRC of message is not correct!`);\n        }\n        this.logger && this.logger.debug(`parseSIA str : ${str}`);\n        const regexstr = /\"(.+)\"(\\d{4})(R(.{0,6})){0,1}(L(.{0,6}))#([\\w\\d]+)\\[(.+)/gm;\n        const regexstr_result = regexstr.exec(str);\n        if (!regexstr_result || regexstr_result.length !== 9) {\n            throw new Error('Could not parse SIA message. Message corupted');\n        }\n        const id: string = regexstr_result[1] || '';\n        const seq: string = regexstr_result[2] || '';\n        const rpref: string = regexstr_result[4] || '';\n        const lpref: string = regexstr_result[6] || '';\n        const act: string = regexstr_result[7] || '';\n        let msg: string = regexstr_result[8] || '';\n        const cfg = this.getAccountInfo(act);\n        if (!cfg) {\n            throw new Error(`Could not parse SIA message. Accountnumber ${act} missing in the configuration`);\n        }\n        /** if id starts with *, message is encrypted */\n        switch (id) {\n            case '*SIA-DCS':\n            case '*ADM-CID':\n                if (!cfg.aes || !cfg.password) {\n                    throw new Error(\n                        `Could not parse SIA message. Could not decrypt message, because AES encrypting disabled or password is missing for ${cfg.accountnumber}`,\n                    );\n                }\n                msg = this.decrypt_hex(cfg.password, msg);\n                if (msg) {\n                    const padlen = msg.indexOf('|');\n                    msg = msg.substring(padlen + 1); // Data Message\n                    this.logger && this.logger.debug(`SIA Message decrypted part: ${msg}`);\n                } else {\n                    throw new Error(`Could not parse SIA message. Could not decrypt message`);\n                }\n                break;\n            case 'SIA-DCS':\n            case 'ADM-CID':\n                if (cfg.aes) {\n                    throw new Error(`Could not parse SIA message. Encrypting enabled, message was sent not entcrypted`);\n                }\n                break;\n            default:\n                break;\n        }\n        const regexmsg = /(.+?)\\](\\[(.*?)\\])?(_(.+)){0,1}/gm;\n        const regexmsg_result = regexmsg.exec(msg);\n        if (!regexmsg_result || regexmsg_result.length !== 6) {\n            throw new Error(`Incorrect format of data message ${msg}`);\n        }\n        /** Message */\n        const data_message = regexmsg_result[1] || '';\n        /** Extended message */\n        const data_extended = regexmsg_result[3] || '';\n        /** timeestamp */\n        const ts = regexmsg_result[5] || '';\n        /** return values */\n        const sia: ifsia = {\n            id: id,\n            seq: seq,\n            lpref: lpref,\n            rpref: rpref,\n            act: act,\n            data_extended: data_extended,\n            data_message: data_message,\n            crc: crc,\n            len: len,\n            data: data,\n            calc_crc: calc_crc,\n            calc_len: calc_len,\n            crcformat: crcformat,\n            str: str,\n            ts: ts,\n        };\n        this.logger && this.logger.debug(`parseSIA : ${JSON.stringify(sia)}`);\n        // Test if all required fields are filled\n        if (\n            sia &&\n            sia.id.length > 0 &&\n            sia.seq.length > 0 &&\n            sia.lpref.length > 0 &&\n            sia.act.length > 0 &&\n            sia.data_message.length > 0\n        ) {\n            return sia;\n        }\n        throw new Error(`Could not parse SIA message ${data.toString()}. Required SIA fields missing`);\n    }\n\n    /**\n     * Listen Server TCP\n     */\n    public serverStartTCP(): void {\n        // this.servertcp = net.createServer();\n        this.servertcp.on('connection', sock => {\n            const remoteAddress = `${sock.remoteAddress}:${sock.remotePort}`;\n            this.logger && this.logger.debug(`New client connected: ${remoteAddress}`);\n            sock.on('data', (data: any) => {\n                try {\n                    this.logger &&\n                        this.logger.debug(`received from ${remoteAddress} following data: ${JSON.stringify(data)}`);\n                    this.logger &&\n                        this.logger.info(`received from ${remoteAddress} following message: ${data.toString().trim()}`);\n                    this.emit('data', data);\n                    const sia = this.parseSIA(data);\n                    const ack = this.createACK(sia);\n                    sock.end(ack);\n                    this.emit('sia', sia, undefined);\n                    this.logger &&\n                        this.logger.info(`sending to ${remoteAddress} following ACK message: ${ack.toString().trim()}`);\n                } catch (err) {\n                    const ack = this.createNACK(data);\n                    sock.end(ack);\n                    this.emit('sia', undefined, tools.getErrorMessage(err));\n                    this.logger &&\n                        this.logger.error(\n                            `sending to ${remoteAddress} following NACK message: ${ack.toString().trim()} because of error ${tools.getErrorMessage(err)}`,\n                        );\n                }\n            });\n            sock.on('close', () => {\n                this.logger && this.logger.info(`connection from ${remoteAddress} closed`);\n            });\n            sock.on('error', (err: any) => {\n                this.logger && this.logger.error(`Connection ${remoteAddress} error:  ${tools.getErrorMessage(err)}`);\n                this.emit('error', tools.getErrorMessage(err));\n            });\n        });\n        this.servertcp.on('close', () => {\n            this.logger && this.logger.info(`TCP Listen server on ${this.host}:${this.port} closed`);\n            this.emit('close');\n        });\n        this.servertcp.listen(this.port, this.host, () => {\n            this.logger && this.logger.info(`SIA Server listening on IP-Adress (TCP): ${this.host}:${this.port}`);\n        });\n    }\n\n    /**\n     * Stop TCP Server\n     */\n    public serverStopTCP(): void {\n        if (this.servertcp) {\n            this.servertcp.close(err => {\n                if (err) {\n                    throw new Error(`Could not close TCP Listen server on : ${this.host}:${this.port}`);\n                } else {\n                    this.logger.info(`Close TCP Listen server on: ${this.host}:${this.port}`);\n                }\n            });\n        }\n    }\n\n    /**\n     * Listen Server UDP\n     */\n    public serverStartUDP(): void {\n        // const serverudp = dgram.createSocket('udp4');\n        this.serverudp.on('message', (data: any, remote: any) => {\n            try {\n                this.logger &&\n                    this.logger.debug(`received from ${remote.address} following data: ${JSON.stringify(data)}`);\n                this.logger &&\n                    this.logger.info(`received from ${remote.address} following message: ${data.toString().trim()}`);\n                this.emit('data', data);\n                const sia = this.parseSIA(data);\n                const ack = this.createACK(sia);\n                // set states only if ACK okay\n                // eslint-disable-next-line @typescript-eslint/no-unused-vars\n                this.serverudp.send(ack, 0, ack.length, remote.port, remote.address, (err: any, bytes: any) => {});\n                this.emit('sia', sia, undefined);\n                this.logger &&\n                    this.logger.info(`sending to ${remote.address} following ACK message: ${ack.toString().trim()}`);\n            } catch (err) {\n                const ack = this.createNACK(data);\n                // eslint-disable-next-line @typescript-eslint/no-unused-vars\n                this.serverudp.send(ack, 0, ack.length, remote.port, remote.address, (err: any, bytes: any) => {});\n                this.emit('sia', undefined, tools.getErrorMessage(err));\n                this.logger &&\n                    this.logger.error(\n                        `sending to ${remote.address} following NACK message: ${ack.toString().trim()}  because of error ${tools.getErrorMessage(err)}`,\n                    );\n            }\n        });\n        this.serverudp.on('close', () => {\n            this.logger && this.logger.info(`UDP Connection closed`);\n            this.emit('close');\n        });\n        this.serverudp.on('error', (err: any) => {\n            this.logger && this.logger.error(`UDP Error: ${tools.getErrorMessage(err)}`);\n            this.emit('error', tools.getErrorMessage(err));\n        });\n        this.serverudp.bind(this.port, this.host, () => {\n            this.logger &&\n                this.logger.info(\n                    `SIA Server listening on IP-Adress (UDP): ${this.serverudp.address().address}:${this.serverudp.address().port}`,\n                );\n        });\n    }\n\n    /**\n     * Stop UDP Server\n     */\n    public serverStopUDP(): void {\n        if (this.serverudp) {\n            this.serverudp.close(() => {\n                this.logger.info(\n                    `Close UDP Listen server on: ${this.serverudp.address().address}:${this.serverudp.address().port}`,\n                );\n            });\n        }\n    }\n\n    /**\n     * CRC Calculation. Example. crc16([0x20, 0x22])\n     *\n     * @param data - string\n     * @returns crc\n     */\n    private crc16old(data: any): any {\n        /* CRC table for the CRC-16. The poly is 0x8005 (x^16 + x^15 + x^2 + 1) */\n        const crctab16 = new Uint16Array([\n            0x0000, 0xc0c1, 0xc181, 0x0140, 0xc301, 0x03c0, 0x0280, 0xc241, 0xc601, 0x06c0, 0x0780, 0xc741, 0x0500,\n            0xc5c1, 0xc481, 0x0440, 0xcc01, 0x0cc0, 0x0d80, 0xcd41, 0x0f00, 0xcfc1, 0xce81, 0x0e40, 0x0a00, 0xcac1,\n            0xcb81, 0x0b40, 0xc901, 0x09c0, 0x0880, 0xc841, 0xd801, 0x18c0, 0x1980, 0xd941, 0x1b00, 0xdbc1, 0xda81,\n            0x1a40, 0x1e00, 0xdec1, 0xdf81, 0x1f40, 0xdd01, 0x1dc0, 0x1c80, 0xdc41, 0x1400, 0xd4c1, 0xd581, 0x1540,\n            0xd701, 0x17c0, 0x1680, 0xd641, 0xd201, 0x12c0, 0x1380, 0xd341, 0x1100, 0xd1c1, 0xd081, 0x1040, 0xf001,\n            0x30c0, 0x3180, 0xf141, 0x3300, 0xf3c1, 0xf281, 0x3240, 0x3600, 0xf6c1, 0xf781, 0x3740, 0xf501, 0x35c0,\n            0x3480, 0xf441, 0x3c00, 0xfcc1, 0xfd81, 0x3d40, 0xff01, 0x3fc0, 0x3e80, 0xfe41, 0xfa01, 0x3ac0, 0x3b80,\n            0xfb41, 0x3900, 0xf9c1, 0xf881, 0x3840, 0x2800, 0xe8c1, 0xe981, 0x2940, 0xeb01, 0x2bc0, 0x2a80, 0xea41,\n            0xee01, 0x2ec0, 0x2f80, 0xef41, 0x2d00, 0xedc1, 0xec81, 0x2c40, 0xe401, 0x24c0, 0x2580, 0xe541, 0x2700,\n            0xe7c1, 0xe681, 0x2640, 0x2200, 0xe2c1, 0xe381, 0x2340, 0xe101, 0x21c0, 0x2080, 0xe041, 0xa001, 0x60c0,\n            0x6180, 0xa141, 0x6300, 0xa3c1, 0xa281, 0x6240, 0x6600, 0xa6c1, 0xa781, 0x6740, 0xa501, 0x65c0, 0x6480,\n            0xa441, 0x6c00, 0xacc1, 0xad81, 0x6d40, 0xaf01, 0x6fc0, 0x6e80, 0xae41, 0xaa01, 0x6ac0, 0x6b80, 0xab41,\n            0x6900, 0xa9c1, 0xa881, 0x6840, 0x7800, 0xb8c1, 0xb981, 0x7940, 0xbb01, 0x7bc0, 0x7a80, 0xba41, 0xbe01,\n            0x7ec0, 0x7f80, 0xbf41, 0x7d00, 0xbdc1, 0xbc81, 0x7c40, 0xb401, 0x74c0, 0x7580, 0xb541, 0x7700, 0xb7c1,\n            0xb681, 0x7640, 0x7200, 0xb2c1, 0xb381, 0x7340, 0xb101, 0x71c0, 0x7080, 0xb041, 0x5000, 0x90c1, 0x9181,\n            0x5140, 0x9301, 0x53c0, 0x5280, 0x9241, 0x9601, 0x56c0, 0x5780, 0x9741, 0x5500, 0x95c1, 0x9481, 0x5440,\n            0x9c01, 0x5cc0, 0x5d80, 0x9d41, 0x5f00, 0x9fc1, 0x9e81, 0x5e40, 0x5a00, 0x9ac1, 0x9b81, 0x5b40, 0x9901,\n            0x59c0, 0x5880, 0x9841, 0x8801, 0x48c0, 0x4980, 0x8941, 0x4b00, 0x8bc1, 0x8a81, 0x4a40, 0x4e00, 0x8ec1,\n            0x8f81, 0x4f40, 0x8d01, 0x4dc0, 0x4c80, 0x8c41, 0x4400, 0x84c1, 0x8581, 0x4540, 0x8701, 0x47c0, 0x4680,\n            0x8641, 0x8201, 0x42c0, 0x4380, 0x8341, 0x4100, 0x81c1, 0x8081, 0x4040,\n        ]);\n        let len = data.length;\n        let buffer = 0;\n        let crc = 0;\n        while (len--) {\n            crc = (crc >>> 8) ^ crctab16[(crc ^ data[buffer++]) & 0xff];\n        }\n        return crc;\n        /* return [(crc >>> 8 & 0xff), (crc & 0xff)]; */\n    }\n\n    /**\n     * CRC Calculation. Example. crc16([0x20, 0x22])\n     *\n     * @param buffer has to bei a Buffer like crc16([0x20, 0x22])\n     * @returns crc as number\n     */\n    private crc16(buffer: Buffer): number {\n        let crc = 0;\n        for (const byte of buffer) {\n            let temp = byte & 0xff;\n            for (let i = 0; i < 8; i++) {\n                temp ^= crc & 1;\n                crc >>= 1;\n                if (temp & 1) {\n                    crc ^= 0xa001;\n                }\n                temp >>= 1;\n            }\n        }\n        return crc;\n    }\n\n    /**\n     * CRC Calculation. Example. crc16str([0x20, 0x22]) or crc16src('hello');\n     *\n     * @param str kann ein String oder Buffer sein\n     * @returns crc as number\n     */\n    private crc16str(str: string | Buffer): number {\n        // const crc = this.crc16old(Buffer.from(str));\n        const crc = this.crc16(Buffer.from(str));\n        return crc;\n    }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAmB;AACnB,mBAAkB;AAClB,oBAA6B;AAC7B,iBAAgB;AAChB,YAAuB;AAwDhB,MAAM,YAAY,2BAAa;AAAA,EAC1B;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWR,YAAY,WAA2E;AACnF,UAAM;AACN,SAAK,UAAU,UAAU,YAAY,SAAY,KAAK,UAAU;AAChE,SAAK,OAAO,UAAU;AACtB,SAAK,OAAO,UAAU;AACtB,SAAK,WAAW,CAAC;AACjB,QAAI,UAAU,QAAQ;AAClB,WAAK,SAAS;AAAA,QACV,MAAM,UAAU,OAAO,OAAO,UAAU,OAAO,OAAO,UAAU;AAAA,QAChE,OAAO,UAAU,OAAO,QAAQ,UAAU,OAAO,QAAQ,UAAU;AAAA,QACnE,OAAO,UAAU,OAAO,QAAQ,UAAU,OAAO,QAAQ,UAAU;AAAA,MACvE;AAAA,IACJ;AACA,SAAK,YAAY,aAAAA,QAAM,aAAa,MAAM;AAC1C,SAAK,YAAY,WAAAC,QAAI,aAAa;AAAA,EACtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOO,YAAY,UAA6B;AAC5C,SAAK,WAAW;AAChB,eAAW,WAAW,KAAK,UAAU;AACjC,UAAI,CAAC,MAAM,YAAY,QAAQ,aAAa,GAAG;AAC3C,cAAM,IAAI;AAAA,UACN,iBAAiB,QAAQ,aAAa;AAAA,QAC1C;AAAA,MACJ;AACA,UAAI,QAAQ,cAAc,SAAS,KAAK,QAAQ,cAAc,SAAS,IAAI;AACvE,cAAM,IAAI,MAAM,iBAAiB,QAAQ,aAAa,mCAAmC;AAAA,MAC7F;AACA,UAAI,QAAQ,QAAQ,MAAM;AACtB,YAAI,QAAQ,QAAQ,MAAM;AACtB,kBAAQ,WAAW,OAAO,KAAK,QAAQ,UAAU,KAAK;AAAA,QAC1D;AACA,cAAM,MAAM,QAAQ,SAAS;AAE7B,YAAI,QAAQ,MAAM,QAAQ,MAAM,QAAQ,IAAI;AACxC,gBAAM,IAAI;AAAA,YACN,8BAA8B,QAAQ,aAAa;AAAA,UACvD;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AACA,QAAI,KAAK,SAAS,WAAW,GAAG;AAC5B,YAAM,IAAI,MAAM,uBAAuB;AAAA,IAC3C;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOQ,SAAS,MAAmB;AAChC,UAAM,QAAQ,CAAC;AACf,aAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,KAAK;AAClC,YAAM,WAAW,KAAK,WAAW,CAAC;AAClC,YAAM,OAAO,KAAK,KAAK,KAAK,IAAI,QAAQ,IAAI,KAAK,IAAI,GAAG,CAAC;AACzD,eAAS,IAAI,GAAG,IAAI,MAAM,KAAK;AAC3B,cAAM,KAAM,YAAa,IAAI,IAAM,GAAI;AAAA,MAC3C;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUQ,cAAc,KAAa,SAAiB,QAAa,QAAqB;AAClF,UAAM,YAAY,UAAU;AAC5B,UAAM,OAAO,KAAK,KAAK,MAAM,EAAE,SAAS,MAAM;AAE9C,UAAM,YAAY,IAAI,SAAS;AAC/B,QAAI,YAAY,WAAW;AACvB,eAAS,IAAI,WAAW,IAAI,WAAW,KAAK,GAAG;AAC3C,eAAO;AAAA,MACX;AAAA,IACJ,WAAW,YAAY,WAAW;AAC9B,aAAQ,IAAI,SAAS,IAAK,aAAa,GAAG;AACtC,eAAO;AAAA,MACX;AAAA,IACJ;AACA,WAAO,OAAO,KAAK,KAAK,MAAM,EAAE,SAAS,MAAM;AAAA,EACnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQQ,YAAY,UAAkB,WAAwB;AAC1D,QAAI;AACA,YAAM,KAAK,OAAO,MAAM,EAAE;AAC1B,SAAG,KAAK,CAAC;AACT,UAAI;AACJ,cAAQ,SAAS,QAAQ;AAAA,QACrB,KAAK;AACD,gBAAM;AACN;AAAA,QACJ,KAAK;AACD,gBAAM;AACN;AAAA,QACJ,KAAK;AACD,gBAAM;AACN;AAAA,QACJ;AACI,gBAAM,IAAI,MAAM,kDAAkD;AAAA,MAC1E;AAEA,YAAM,SAAS,cAAAC,QAAO,eAAe,KAAK,UAAU,EAAE;AAEtD,UAAI,UAAU,OAAO,OAAO,SAAS;AACrC,gBAAU,OAAO,OAAO,CAAC,SAAS,OAAO,MAAM,CAAC,CAAC;AACjD,aAAO,QAAQ,SAAS,KAAK;AAAA,IACjC,SAAS,KAAK;AACV,YAAM,IAAI,MAAM,6BAA6B,EAAE,OAAO,IAAI,CAAC;AAAA,IAC/D;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASQ,YAAY,UAAkB,WAAwB;AAC1D,QAAI;AACA,YAAM,KAAK,OAAO,MAAM,EAAE;AAC1B,SAAG,KAAK,CAAC;AACT,UAAI;AAEJ,cAAQ,SAAS,QAAQ;AAAA,QACrB,KAAK;AACD,gBAAM;AACN;AAAA,QACJ,KAAK;AACD,gBAAM;AACN;AAAA,QACJ,KAAK;AACD,gBAAM;AACN;AAAA,QACJ;AACI,gBAAM,IAAI,MAAM,oDAAoD;AAAA,MAC5E;AACA,YAAM,WAAW,cAAAA,QAAO,iBAAiB,KAAK,UAAU,EAAE;AAC1D,eAAS,eAAe,KAAK;AAC7B,UAAI,UAAU,SAAS,OAAO,WAAW,OAAO,OAAO;AACvD,iBAAW,SAAS,MAAM,OAAO;AACjC,aAAO;AAAA,IACX,SAAS,KAAK;AACV,YAAM,IAAI,MAAM,6BAA6B,EAAE,OAAO,IAAI,CAAC;AAAA,IAC/D;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOQ,gCAAwC;AAC5C,UAAM,OAAO,oBAAI,KAAK;AACtB,UAAM,QAAQ,OAAO,KAAK,YAAY,CAAC,EAAE,SAAS,GAAG,GAAG;AACxD,UAAM,UAAU,OAAO,KAAK,cAAc,CAAC,EAAE,SAAS,GAAG,GAAG;AAC5D,UAAM,UAAU,OAAO,KAAK,cAAc,CAAC,EAAE,SAAS,GAAG,GAAG;AAC5D,UAAM,QAAQ,OAAO,KAAK,YAAY,IAAI,CAAC,EAAE,SAAS,GAAG,GAAG;AAC5D,UAAM,MAAM,OAAO,KAAK,WAAW,CAAC,EAAE,SAAS,GAAG,GAAG;AACrD,UAAM,OAAO,KAAK,eAAe;AAEjC,WAAO,GAAG,KAAK,IAAI,OAAO,IAAI,OAAO,IAAI,KAAK,IAAI,GAAG,IAAI,IAAI;AAAA,EACjE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQQ,2BAA2B,IAAkB;AACjD,UAAM,CAAC,UAAU,QAAQ,IAAI,GAAG,MAAM,GAAG;AACzC,UAAM,CAAC,OAAO,SAAS,OAAO,IAAI,SAAS,MAAM,GAAG,EAAE,IAAI,MAAM;AAChE,UAAM,CAAC,OAAO,KAAK,IAAI,IAAI,SAAS,MAAM,GAAG,EAAE,IAAI,MAAM;AAEzD,UAAM,UAAU,IAAI,KAAK,KAAK,IAAI,MAAM,QAAQ,GAAG,KAAK,OAAO,SAAS,OAAO,CAAC;AAEhF,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASQ,SAAS,KAAa,KAAuB;AACjD,QAAI,CAAC,OAAO,IAAI,WAAW,GAAG;AAC1B,aAAO;AAAA,IACX;AAEA,UAAM,WAAW,KAAK,2BAA2B,GAAG;AAEpD,UAAM,OAAO,IAAI,SAAS,IAAI,MAAM,KAAK,8BAA8B;AACvE,UAAM,WAAW,KAAK,2BAA2B,GAAG;AACpD,SAAK,UAAU,KAAK,OAAO,MAAM,sBAAsB,SAAS,eAAe,CAAC,EAAE;AAClF,SAAK,UAAU,KAAK,OAAO,MAAM,uBAAuB,SAAS,eAAe,CAAC,EAAE;AAEnF,UAAM,OAAO,KAAK,KAAK,SAAS,QAAQ,IAAI,SAAS,QAAQ,KAAK,GAAI;AACtE,QAAI,KAAK,UAAU,KAAK,OAAO,KAAK,SAAS;AACzC,aAAO;AAAA,IACX;AACA,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQQ,eAAe,KAAwB;AAC3C,aAAS,IAAI,GAAG,IAAI,KAAK,SAAS,QAAQ,KAAK;AAC3C,YAAM,MAAM,KAAK,SAAS,CAAC;AAC3B,UAAI,IAAI,kBAAkB,KAAK;AAC3B,eAAO;AAAA,MACX;AAAA,IACJ;AACA,UAAM,IAAI,MAAM,YAAY,GAAG,sCAAsC;AAAA,EACzE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQO,WAAW,MAAsB;AACpC,UAAM,KAAK,KAAK,8BAA8B;AAC9C,UAAM,MAAM,qBAA8C,EAAE;AAC5D,UAAM,MAAM,KAAK,SAAS,GAAG;AAC7B,UAAM,MAAM,IAAI;AAChB,UAAM,SAAS,OAAO,IAAI,SAAS,EAAE,CAAC,GAAG,MAAM,EAAE,EAAE,YAAY;AAC/D,UAAM,SAAS,OAAO,IAAI,SAAS,EAAE,CAAC,GAAG,MAAM,EAAE,EAAE,YAAY;AAC/D,UAAM,QAAQ,OAAO,KAAK,CAAC,EAAI,CAAC;AAChC,UAAM,MAAM,OAAO,KAAK,CAAC,EAAI,CAAC;AAC9B,QAAI;AACJ,UAAM,YAAY,KAAK,aAAa,IAAI;AACxC,YAAQ,WAAW;AAAA,MACf,KAAK;AAED,iBAAS,OAAO,KAAK,CAAE,QAAQ,IAAK,KAAM,MAAM,GAAI,CAAC;AACrD,aAAK,UAAU,KAAK,OAAO,MAAM,0BAA0B,MAAM,IAAI,MAAM,GAAG,GAAG,QAAQ;AACzF;AAAA,MACJ,KAAK;AACD,iBAAS,OAAO,KAAK,MAAM;AAC3B,aAAK,UAAU,KAAK,OAAO,MAAM,uBAAuB,MAAM,GAAG,MAAM,GAAG,GAAG,QAAQ;AACrF;AAAA,MACJ;AAEI,iBAAS,OAAO,KAAK,EAAE;AACvB,aAAK,UAAU,KAAK,OAAO,MAAM,4BAA4B;AAC7D;AAAA,IACR;AACA,UAAM,SAAS,OAAO,KAAK,MAAM;AACjC,UAAM,MAAM,OAAO,KAAK,GAAG;AAC3B,UAAM,OAAO,OAAO,OAAO,CAAC,OAAO,QAAQ,QAAQ,KAAK,GAAG,CAAC;AAC5D,SAAK,UAAU,KAAK,OAAO,MAAM,gBAAgB,KAAK,UAAU,IAAI,CAAC,EAAE;AACvE,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQO,UAAUC,MAAoB;AACjC,QAAI,CAACA,MAAK;AACN,YAAM,IAAI,MAAM,mCAAmC;AAAA,IACvD;AAEA,UAAM,KAAK,KAAK,8BAA8B;AAC9C,UAAM,MAAM,KAAK,eAAeA,KAAI,GAAG;AACvC,QAAI,CAAC,KAAK;AACN,YAAM,IAAI,MAAM,uCAAuCA,KAAI,GAAG,+BAA+B;AAAA,IACjG;AAEA,UAAM,SAASA,KAAI,MAAMA,KAAI,GAAG,SAAS,IAAI,KAAK,SAASA,KAAI,IAAI,EAAE,IAAI;AACzE,SAAK,UAAU,KAAK,OAAO,MAAM,qBAAqB,KAAK,UAAU,GAAG,CAAC,EAAE;AAC3E,SAAK,UAAU,KAAK,OAAO,MAAM,qBAAqB,KAAK,UAAUA,IAAG,CAAC,EAAE;AAC3E,QAAI,MAAM;AACV,QAAI,CAAC,QAAQ;AACT,YAAM,IAAI,MAAM,wDAAwDA,KAAI,EAAE,oBAAoB,EAAE,GAAG;AAAA,IAC3G;AACA,QAAIA,KAAI,YAAYA,KAAI,KAAK;AACzB,YAAM,IAAI,MAAM,yDAAyD;AAAA,IAC7E;AACA,QAAIA,KAAI,YAAYA,KAAI,KAAK;AACzB,YAAM,IAAI,MAAM,sDAAsD;AAAA,IAC1E;AACA,UAAM,QAAQA,KAAI,SAASA,KAAI,MAAM,SAAS,IAAI,IAAIA,KAAI,KAAK,KAAK;AACpE,UAAM,QAAQA,KAAI,SAASA,KAAI,MAAM,SAAS,IAAI,IAAIA,KAAI,KAAK,KAAK;AACpE,YAAQA,KAAI,IAAI;AAAA,MACZ,KAAK;AAAA,MACL,KAAK,YAAY;AACb,YAAI,CAAC,IAAI,OAAO,CAAC,IAAI,UAAU;AAC3B,gBAAM,IAAI;AAAA,YACN,+GAA+G,IAAI,aAAa;AAAA,UACpI;AAAA,QACJ;AACA,cAAM,SAAS,MAAM,EAAE,GAAG;AAC1B,cAAM,SAAS,KAAM,SAAS;AAC9B,cAAM,MAAM,OAAO,MAAM,QAAQ,CAAI;AACrC,cAAM,MAAM,KAAK,YAAY,IAAI,UAAU,GAAG,IAAI,SAAS,CAAC,MAAM,EAAE,EAAE;AACtE,cAAM,SAASA,KAAI,GAAG,GAAG,KAAK,GAAG,KAAK,IAAIA,KAAI,GAAG,IAAI,GAAG;AACxD;AAAA,MACJ;AAAA,MACA,KAAK;AAAA,MACL,KAAK,WAAW;AACZ,cAAM,QAAQA,KAAI,GAAG,GAAG,KAAK,GAAG,KAAK,IAAIA,KAAI,GAAG;AAChD;AAAA,MACJ;AAAA,MACA;AACI;AAAA,IACR;AACA,UAAM,MAAM,KAAK,SAAS,GAAG;AAC7B,UAAM,MAAM,IAAI;AAChB,UAAM,SAAS,OAAO,IAAI,SAAS,EAAE,CAAC,GAAG,MAAM,EAAE,EAAE,YAAY;AAC/D,UAAM,SAAS,OAAO,IAAI,SAAS,EAAE,CAAC,GAAG,MAAM,EAAE,EAAE,YAAY;AAC/D,UAAM,QAAQ,OAAO,KAAK,CAAC,EAAI,CAAC;AAChC,UAAM,MAAM,OAAO,KAAK,CAAC,EAAI,CAAC;AAC9B,QAAI;AACJ,YAAQA,QAAA,gBAAAA,KAAK,WAAW;AAAA,MACpB,KAAK;AAED,iBAAS,OAAO,KAAK,CAAE,QAAQ,IAAK,KAAM,MAAM,GAAI,CAAC;AACrD,aAAK,UAAU,KAAK,OAAO,MAAM,0BAA0B,MAAM,IAAI,MAAM,GAAG,GAAG,QAAQ;AACzF;AAAA,MACJ,KAAK;AACD,iBAAS,OAAO,KAAK,MAAM;AAC3B,aAAK,UAAU,KAAK,OAAO,MAAM,uBAAuB,MAAM,GAAG,MAAM,GAAG,GAAG,QAAQ;AACrF;AAAA,MACJ;AACI,cAAM,IAAI,MAAM,qEAAqE;AACrF;AAAA,IACR;AACA,UAAM,SAAS,OAAO,KAAK,MAAM;AACjC,UAAM,MAAM,OAAO,KAAK,GAAG;AAC3B,UAAM,MAAM,OAAO,OAAO,CAAC,OAAO,QAAQ,QAAQ,KAAK,GAAG,CAAC;AAC3D,SAAK,UAAU,KAAK,OAAO,MAAM,eAAe,KAAK,UAAU,GAAG,CAAC,EAAE;AACrE,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQQ,gBAAgB,UAAoB;AACxC,QAAI,CAAC,UAAU;AACX,aAAO;AAAA,IACX;AACA,QAAI,SAAS;AACb,aAAS,IAAI,GAAG,IAAI,SAAS,QAAQ,KAAK;AACtC,UAAI,OAAO,SAAS,CAAC,IAAI,KAAM,SAAS,EAAE;AAC1C,YAAM,IAAI,WAAW,IAAI,IAAI,GAAG,KAAK;AACrC,gBAAU;AAAA,IACd;AACA,WAAO,OAAO,YAAY;AAAA,EAC9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQQ,aAAa,MAAsB;AACvC,QAAI,MAAM;AAEN,UAAI,KAAK,CAAC,KAAK,IAAI,WAAW,CAAC,KAAK,KAAK,CAAC,KAAK,IAAI,WAAW,CAAC,GAAG;AAC9D,eAAO;AAAA,MACX;AAEA,UAAI,KAAK,CAAC,KAAK,IAAI,WAAW,CAAC,KAAK,KAAK,CAAC,KAAK,IAAI,WAAW,CAAC,GAAG;AAC9D,eAAO;AAAA,MACX;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQQ,oBAAoB,MAAsB;AAC9C,QAAI,MAAM;AACN,eAAS,IAAI,KAAK,SAAS,GAAG,IAAI,GAAG,KAAK;AACtC,YAAI,KAAK,CAAC,MAAM,GAAM;AAClB,iBAAO,KAAK,SAAS,GAAG,CAAC;AAAA,QAC7B,OAAO;AACH;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQO,SAAS,MAAqB;AACjC,WAAO,KAAK,oBAAoB,IAAI;AACpC,UAAM,UAAU,KAAK,SAAS;AAC9B,QAAI,CAAC,QAAQ,KAAK,CAAC,MAAM,MAAQ,KAAK,OAAO,MAAM,IAAM;AACrD,YAAM,IAAI,MAAM,mBAAmB,6BAAM,UAAU,gBAAgB;AAAA,IACvE;AACA,UAAM,YAAY,KAAK,aAAa,IAAI;AACxC,QAAI,MAAM;AACV,QAAI,MAAM;AACV,QAAI,MAAM;AACV,YAAQ,WAAW;AAAA,MACf,KAAK;AAED,cAAM,OAAO,KAAK,KAAK,SAAS,GAAG,OAAO,CAAC,EAAE,SAAS;AACtD,cAAM,KAAK,SAAS,GAAG,CAAC,EAAE,SAAS,EAAE,YAAY;AACjD,cAAM,KAAK,SAAS,GAAG,CAAC,EAAE,SAAS,EAAE,YAAY;AACjD,aAAK,UAAU,KAAK,OAAO,MAAM,uBAAuB,GAAG,GAAG,GAAG,GAAG,2BAAK,UAAU,QAAQ;AAC3F;AAAA,MACJ,KAAK;AAED,cAAM,OAAO,KAAK,KAAK,SAAS,GAAG,OAAO,CAAC,EAAE,SAAS;AACtD,cAAM,OAAO,KAAK,SAAS,GAAG,CAAC,EAAE,SAAS,CAAC,GAAG,MAAM,EAAE,EAAE,YAAY;AACpE,cAAM,QAAQ,KAAK,CAAC,IAAI,MAAM,KAAK,CAAC,GAAG,SAAS,EAAE,CAAC,GAAG,MAAM,EAAE,EAAE,YAAY;AAE5E,aAAK,UAAU,KAAK,OAAO,MAAM,0BAA0B,GAAG,IAAI,GAAG,GAAG,2BAAK,UAAU,QAAQ;AAC/F;AAAA,MACJ;AACI,cAAM,IAAI,MAAM,gEAAgE;AAAA,IACxF;AACA,QAAI,IAAI,WAAW,GAAG;AAClB,YAAM,IAAI,MAAM,+CAA+C;AAAA,IACnE;AACA,UAAM,WAAW,OAAO,IAAI,OAAO,SAAS,EAAE,CAAC,GAAG,MAAM,EAAE,EAAE,YAAY;AACxE,UAAM,WAAW,OAAO,KAAK,SAAS,GAAG,EAAE,SAAS,EAAE,CAAC,GAAG,MAAM,EAAE,EAAE,YAAY;AAChF,QAAI,YAAY,KAAK;AACjB,YAAM,IAAI,MAAM,gEAAgE;AAAA,IACpF;AACA,QAAI,YAAY,KAAK;AACjB,YAAM,IAAI,MAAM,6DAA6D;AAAA,IACjF;AACA,SAAK,UAAU,KAAK,OAAO,MAAM,kBAAkB,GAAG,EAAE;AACxD,UAAM,WAAW;AACjB,UAAM,kBAAkB,SAAS,KAAK,GAAG;AACzC,QAAI,CAAC,mBAAmB,gBAAgB,WAAW,GAAG;AAClD,YAAM,IAAI,MAAM,+CAA+C;AAAA,IACnE;AACA,UAAM,KAAa,gBAAgB,CAAC,KAAK;AACzC,UAAM,MAAc,gBAAgB,CAAC,KAAK;AAC1C,UAAM,QAAgB,gBAAgB,CAAC,KAAK;AAC5C,UAAM,QAAgB,gBAAgB,CAAC,KAAK;AAC5C,UAAM,MAAc,gBAAgB,CAAC,KAAK;AAC1C,QAAI,MAAc,gBAAgB,CAAC,KAAK;AACxC,UAAM,MAAM,KAAK,eAAe,GAAG;AACnC,QAAI,CAAC,KAAK;AACN,YAAM,IAAI,MAAM,8CAA8C,GAAG,+BAA+B;AAAA,IACpG;AAEA,YAAQ,IAAI;AAAA,MACR,KAAK;AAAA,MACL,KAAK;AACD,YAAI,CAAC,IAAI,OAAO,CAAC,IAAI,UAAU;AAC3B,gBAAM,IAAI;AAAA,YACN,sHAAsH,IAAI,aAAa;AAAA,UAC3I;AAAA,QACJ;AACA,cAAM,KAAK,YAAY,IAAI,UAAU,GAAG;AACxC,YAAI,KAAK;AACL,gBAAM,SAAS,IAAI,QAAQ,GAAG;AAC9B,gBAAM,IAAI,UAAU,SAAS,CAAC;AAC9B,eAAK,UAAU,KAAK,OAAO,MAAM,+BAA+B,GAAG,EAAE;AAAA,QACzE,OAAO;AACH,gBAAM,IAAI,MAAM,wDAAwD;AAAA,QAC5E;AACA;AAAA,MACJ,KAAK;AAAA,MACL,KAAK;AACD,YAAI,IAAI,KAAK;AACT,gBAAM,IAAI,MAAM,kFAAkF;AAAA,QACtG;AACA;AAAA,MACJ;AACI;AAAA,IACR;AACA,UAAM,WAAW;AACjB,UAAM,kBAAkB,SAAS,KAAK,GAAG;AACzC,QAAI,CAAC,mBAAmB,gBAAgB,WAAW,GAAG;AAClD,YAAM,IAAI,MAAM,oCAAoC,GAAG,EAAE;AAAA,IAC7D;AAEA,UAAM,eAAe,gBAAgB,CAAC,KAAK;AAE3C,UAAM,gBAAgB,gBAAgB,CAAC,KAAK;AAE5C,UAAM,KAAK,gBAAgB,CAAC,KAAK;AAEjC,UAAMA,OAAa;AAAA,MACf;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACJ;AACA,SAAK,UAAU,KAAK,OAAO,MAAM,cAAc,KAAK,UAAUA,IAAG,CAAC,EAAE;AAEpE,QACIA,QACAA,KAAI,GAAG,SAAS,KAChBA,KAAI,IAAI,SAAS,KACjBA,KAAI,MAAM,SAAS,KACnBA,KAAI,IAAI,SAAS,KACjBA,KAAI,aAAa,SAAS,GAC5B;AACE,aAAOA;AAAA,IACX;AACA,UAAM,IAAI,MAAM,+BAA+B,KAAK,SAAS,CAAC,+BAA+B;AAAA,EACjG;AAAA;AAAA;AAAA;AAAA,EAKO,iBAAuB;AAE1B,SAAK,UAAU,GAAG,cAAc,UAAQ;AACpC,YAAM,gBAAgB,GAAG,KAAK,aAAa,IAAI,KAAK,UAAU;AAC9D,WAAK,UAAU,KAAK,OAAO,MAAM,yBAAyB,aAAa,EAAE;AACzE,WAAK,GAAG,QAAQ,CAAC,SAAc;AAC3B,YAAI;AACA,eAAK,UACD,KAAK,OAAO,MAAM,iBAAiB,aAAa,oBAAoB,KAAK,UAAU,IAAI,CAAC,EAAE;AAC9F,eAAK,UACD,KAAK,OAAO,KAAK,iBAAiB,aAAa,uBAAuB,KAAK,SAAS,EAAE,KAAK,CAAC,EAAE;AAClG,eAAK,KAAK,QAAQ,IAAI;AACtB,gBAAMA,OAAM,KAAK,SAAS,IAAI;AAC9B,gBAAM,MAAM,KAAK,UAAUA,IAAG;AAC9B,eAAK,IAAI,GAAG;AACZ,eAAK,KAAK,OAAOA,MAAK,MAAS;AAC/B,eAAK,UACD,KAAK,OAAO,KAAK,cAAc,aAAa,2BAA2B,IAAI,SAAS,EAAE,KAAK,CAAC,EAAE;AAAA,QACtG,SAAS,KAAK;AACV,gBAAM,MAAM,KAAK,WAAW,IAAI;AAChC,eAAK,IAAI,GAAG;AACZ,eAAK,KAAK,OAAO,QAAW,MAAM,gBAAgB,GAAG,CAAC;AACtD,eAAK,UACD,KAAK,OAAO;AAAA,YACR,cAAc,aAAa,4BAA4B,IAAI,SAAS,EAAE,KAAK,CAAC,qBAAqB,MAAM,gBAAgB,GAAG,CAAC;AAAA,UAC/H;AAAA,QACR;AAAA,MACJ,CAAC;AACD,WAAK,GAAG,SAAS,MAAM;AACnB,aAAK,UAAU,KAAK,OAAO,KAAK,mBAAmB,aAAa,SAAS;AAAA,MAC7E,CAAC;AACD,WAAK,GAAG,SAAS,CAAC,QAAa;AAC3B,aAAK,UAAU,KAAK,OAAO,MAAM,cAAc,aAAa,YAAY,MAAM,gBAAgB,GAAG,CAAC,EAAE;AACpG,aAAK,KAAK,SAAS,MAAM,gBAAgB,GAAG,CAAC;AAAA,MACjD,CAAC;AAAA,IACL,CAAC;AACD,SAAK,UAAU,GAAG,SAAS,MAAM;AAC7B,WAAK,UAAU,KAAK,OAAO,KAAK,wBAAwB,KAAK,IAAI,IAAI,KAAK,IAAI,SAAS;AACvF,WAAK,KAAK,OAAO;AAAA,IACrB,CAAC;AACD,SAAK,UAAU,OAAO,KAAK,MAAM,KAAK,MAAM,MAAM;AAC9C,WAAK,UAAU,KAAK,OAAO,KAAK,4CAA4C,KAAK,IAAI,IAAI,KAAK,IAAI,EAAE;AAAA,IACxG,CAAC;AAAA,EACL;AAAA;AAAA;AAAA;AAAA,EAKO,gBAAsB;AACzB,QAAI,KAAK,WAAW;AAChB,WAAK,UAAU,MAAM,SAAO;AACxB,YAAI,KAAK;AACL,gBAAM,IAAI,MAAM,0CAA0C,KAAK,IAAI,IAAI,KAAK,IAAI,EAAE;AAAA,QACtF,OAAO;AACH,eAAK,OAAO,KAAK,+BAA+B,KAAK,IAAI,IAAI,KAAK,IAAI,EAAE;AAAA,QAC5E;AAAA,MACJ,CAAC;AAAA,IACL;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA,EAKO,iBAAuB;AAE1B,SAAK,UAAU,GAAG,WAAW,CAAC,MAAW,WAAgB;AACrD,UAAI;AACA,aAAK,UACD,KAAK,OAAO,MAAM,iBAAiB,OAAO,OAAO,oBAAoB,KAAK,UAAU,IAAI,CAAC,EAAE;AAC/F,aAAK,UACD,KAAK,OAAO,KAAK,iBAAiB,OAAO,OAAO,uBAAuB,KAAK,SAAS,EAAE,KAAK,CAAC,EAAE;AACnG,aAAK,KAAK,QAAQ,IAAI;AACtB,cAAMA,OAAM,KAAK,SAAS,IAAI;AAC9B,cAAM,MAAM,KAAK,UAAUA,IAAG;AAG9B,aAAK,UAAU,KAAK,KAAK,GAAG,IAAI,QAAQ,OAAO,MAAM,OAAO,SAAS,CAAC,KAAU,UAAe;AAAA,QAAC,CAAC;AACjG,aAAK,KAAK,OAAOA,MAAK,MAAS;AAC/B,aAAK,UACD,KAAK,OAAO,KAAK,cAAc,OAAO,OAAO,2BAA2B,IAAI,SAAS,EAAE,KAAK,CAAC,EAAE;AAAA,MACvG,SAAS,KAAK;AACV,cAAM,MAAM,KAAK,WAAW,IAAI;AAEhC,aAAK,UAAU,KAAK,KAAK,GAAG,IAAI,QAAQ,OAAO,MAAM,OAAO,SAAS,CAACC,MAAU,UAAe;AAAA,QAAC,CAAC;AACjG,aAAK,KAAK,OAAO,QAAW,MAAM,gBAAgB,GAAG,CAAC;AACtD,aAAK,UACD,KAAK,OAAO;AAAA,UACR,cAAc,OAAO,OAAO,4BAA4B,IAAI,SAAS,EAAE,KAAK,CAAC,sBAAsB,MAAM,gBAAgB,GAAG,CAAC;AAAA,QACjI;AAAA,MACR;AAAA,IACJ,CAAC;AACD,SAAK,UAAU,GAAG,SAAS,MAAM;AAC7B,WAAK,UAAU,KAAK,OAAO,KAAK,uBAAuB;AACvD,WAAK,KAAK,OAAO;AAAA,IACrB,CAAC;AACD,SAAK,UAAU,GAAG,SAAS,CAAC,QAAa;AACrC,WAAK,UAAU,KAAK,OAAO,MAAM,cAAc,MAAM,gBAAgB,GAAG,CAAC,EAAE;AAC3E,WAAK,KAAK,SAAS,MAAM,gBAAgB,GAAG,CAAC;AAAA,IACjD,CAAC;AACD,SAAK,UAAU,KAAK,KAAK,MAAM,KAAK,MAAM,MAAM;AAC5C,WAAK,UACD,KAAK,OAAO;AAAA,QACR,4CAA4C,KAAK,UAAU,QAAQ,EAAE,OAAO,IAAI,KAAK,UAAU,QAAQ,EAAE,IAAI;AAAA,MACjH;AAAA,IACR,CAAC;AAAA,EACL;AAAA;AAAA;AAAA;AAAA,EAKO,gBAAsB;AACzB,QAAI,KAAK,WAAW;AAChB,WAAK,UAAU,MAAM,MAAM;AACvB,aAAK,OAAO;AAAA,UACR,+BAA+B,KAAK,UAAU,QAAQ,EAAE,OAAO,IAAI,KAAK,UAAU,QAAQ,EAAE,IAAI;AAAA,QACpG;AAAA,MACJ,CAAC;AAAA,IACL;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQQ,SAAS,MAAgB;AAE7B,UAAM,WAAW,IAAI,YAAY;AAAA,MAC7B;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAChG;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAChG;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAChG;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAChG;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAChG;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAChG;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAChG;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAChG;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAChG;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAChG;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAChG;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAChG;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAChG;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAChG;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAChG;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAChG;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAChG;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAChG;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAChG;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,IACpE,CAAC;AACD,QAAI,MAAM,KAAK;AACf,QAAI,SAAS;AACb,QAAI,MAAM;AACV,WAAO,OAAO;AACV,YAAO,QAAQ,IAAK,UAAU,MAAM,KAAK,QAAQ,KAAK,GAAI;AAAA,IAC9D;AACA,WAAO;AAAA,EAEX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQQ,MAAM,QAAwB;AAClC,QAAI,MAAM;AACV,eAAW,QAAQ,QAAQ;AACvB,UAAI,OAAO,OAAO;AAClB,eAAS,IAAI,GAAG,IAAI,GAAG,KAAK;AACxB,gBAAQ,MAAM;AACd,gBAAQ;AACR,YAAI,OAAO,GAAG;AACV,iBAAO;AAAA,QACX;AACA,iBAAS;AAAA,MACb;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQQ,SAAS,KAA8B;AAE3C,UAAM,MAAM,KAAK,MAAM,OAAO,KAAK,GAAG,CAAC;AACvC,WAAO;AAAA,EACX;AACJ;",
  "names": ["dgram", "net", "crypto", "sia", "err"]
}

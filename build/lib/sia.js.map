{
  "version": 3,
  "sources": ["../../src/lib/sia.ts"],
  "sourcesContent": ["import crypto from 'crypto';\nimport dgram from 'dgram';\nimport { EventEmitter } from 'events';\nimport net from 'net';\nimport * as tools from './tools';\n\n/**\n * Interface account\n */\nexport interface ifaccount {\n    accountnumber: string;\n    password: any;\n    hex: boolean;\n    aes: boolean;\n}\n\n/**\n * SIA Message\n */\nexport interface ifsia {\n    id: string;\n    seq: string; // sequence\n    rpref: any;\n    lpref: any;\n    act: string; // accountnumber\n    data: any; // complete messsage\n    data_message: any; // msgdata\n    data_extended: any; // extdata\n    ts: any; // timestamp\n    crc: any;\n    calc_crc: any;\n    calc_len: number;\n    len: any;\n    crcformat: string;\n    lf: any;\n    cr: any;\n    str: any;\n    pad: any;\n}\n\n/**\n * SIA Class\n */\nexport class sia extends EventEmitter {\n    private timeout: number;\n    private accounts: ifaccount[];\n    private adapter: any;\n    private port: number;\n    private host: string;\n\n    /**\n     * Constructor\n     *\n     * @param parameter parameter\n     * @param parameter.accounts acccounts\n     * @param parameter.timeout timeout\n     * @param parameter.host bind host\n     * @param parameter.port bind port\n     * @param parameter.adapter iobroker adapter\n     */\n    constructor(parameter: { accounts: ifaccount[]; timeout?: number; host: string; port: number; adapter: any }) {\n        super();\n        this.accounts = parameter.accounts;\n        this.timeout = parameter.timeout === undefined ? 10 : parameter.timeout;\n        this.adapter = parameter.adapter;\n        this.host = parameter.host;\n        this.port = parameter.port;\n        this.init();\n    }\n\n    /**\n     * Init function\n     */\n    private init(): void {\n        for (const account of this.accounts) {\n            if (account.aes === true) {\n                if (account.hex === true) {\n                    account.password = Buffer.from(account.password, 'hex');\n                }\n                const len = account.password.length;\n                // Password for AES is not allowed to be longer than 16, 24 and 32 characters\n                if (len !== 16 && len !== 24 && len !== 32) {\n                    throw new Error(\n                        `Password for accountnumber ${account.accountnumber} must be 16, 24 or 32 Byte or 32, 48 or 64 Hex long`,\n                    );\n                }\n            }\n        }\n    }\n\n    /**\n     * convert ASCII Text -> BYTES\n     *\n     * @param text string in ASCII format\n     */\n    private getBytes(text: string): any {\n        const bytes = [];\n        for (let i = 0; i < text.length; i++) {\n            const charCode = text.charCodeAt(i);\n            const cLen = Math.ceil(Math.log(charCode) / Math.log(256));\n            for (let j = 0; j < cLen; j++) {\n                bytes.push((charCode << (j * 8)) & 0xff);\n            }\n        }\n        return bytes;\n    }\n\n    /**\n     * Padding  /  str = customPadding(str, 16, 0x0, \"hex\"); // magic happens here\n     *\n     * @param str -\n     * @param bytelen -\n     * @param padder -\n     * @param format -\n     */\n    private customPadding(str: string, bytelen: number, padder: any, format: any): string {\n        const blockSize = bytelen * 16;\n        str = Buffer.from(str, 'utf8').toString(format);\n        //1 char = 8bytes\n        const bitLength = str.length * 8;\n        if (bitLength < blockSize) {\n            for (let i = bitLength; i < blockSize; i += 8) {\n                str += padder;\n            }\n        } else if (bitLength > blockSize) {\n            while ((str.length * 8) % blockSize != 0) {\n                str += padder;\n            }\n        }\n        return Buffer.from(str, format).toString('utf8');\n    }\n\n    /**\n     *  Encrypt / Input: ASCII , Output: HEX\n     *\n     * @param password - key / password for decrypting message\n     * @param decrypted - messages for encrypting\n     */\n    private encrypt_hex(password: string, decrypted: any): string {\n        try {\n            const iv = Buffer.alloc(16);\n            iv.fill(0);\n            let aes;\n            switch (password.length) {\n                case 16:\n                    aes = 'aes-128-cbc';\n                    break;\n                case 24:\n                    aes = 'aes-192-cbc';\n                    break;\n                case 32:\n                    aes = 'aes-256-cbc';\n                    break;\n                default:\n                    throw new Error(`Could not encrypt to hex. Wrong password length.`);\n            }\n            // Creating Cipheriv with its parameter\n            const cipher = crypto.createCipheriv(aes, password, iv);\n            // cipher.setAutoPadding(false);\n            let encrypt = cipher.update(decrypted);\n            encrypt = Buffer.concat([encrypt, cipher.final()]);\n            return encrypt.toString('hex');\n        } catch (err) {\n            throw new Error(`Could not encrypt to hex: ${tools.getErrorMessage(err)}`);\n        }\n    }\n\n    /**\n     * Decrypt messages\n     *\n     * @param password - key / password for decrypting message\n     * @param encrypted encrypted password\n     * @returns decrypted messsag in hex format\n     */\n    private decrypt_hex(password: string, encrypted: any): string {\n        try {\n            const iv = Buffer.alloc(16);\n            iv.fill(0);\n            let aes;\n            //  password = customPadding(password, 24, 0x0, \"hex\"); // magic happens here\n            switch (password.length) {\n                case 16:\n                    aes = 'aes-128-cbc';\n                    break;\n                case 24:\n                    aes = 'aes-192-cbc';\n                    break;\n                case 32:\n                    aes = 'aes-256-cbc';\n                    break;\n                default:\n                    throw new Error(`Could not decrypt from hex. Wrong password length.`);\n            }\n            const decipher = crypto.createDecipheriv(aes, password, iv);\n            decipher.setAutoPadding(false);\n            let decrypt = decipher.update(encrypted, 'hex', 'utf-8');\n            decrypt += decipher.final('utf-8');\n            return decrypt;\n        } catch (err) {\n            throw new Error(`Could not decrypt from hex: ${tools.getErrorMessage(err)}`);\n        }\n    }\n\n    /**\n     * get timestamp in following format <_HH:MM:SS,MM-DD-YYYY>\n     *\n     * @param datum date object or leave empty\n     * @returns timestamp as strng\n     */\n    private getTimestamp(datum?: Date): string {\n        if (!datum) {\n            datum = new Date();\n        }\n        // let month = ('0' + datum.getUTCMonth()).slice(-2); // liefert 0 - 11\n        const month = `0${datum.getUTCMonth() + 1}`.slice(-2);\n        const year = datum.getUTCFullYear(); // YYYY (startet nicht bei 0)\n        const day = `0${datum.getUTCDate()}`.slice(-2); // liefert 1 - 31\n        const hour = `0${datum.getUTCHours()}`.slice(-2); // liefert 0 - 23\n        const minute = `0${datum.getUTCMinutes()}`.slice(-2);\n        const second = `0${datum.getUTCSeconds()}`.slice(-2);\n        const str = `_${hour}:${minute}:${second},${month}-${day}-${year}`;\n        return str;\n    }\n\n    /**\n     * Is SIA Message in time (+20 or -40 seconds)\n     *\n     * @param ts timestamp in seconds, for examp -20, +20\n     * @returns true if timestamp in range, else false\n     */\n    private isInTime(ts: any): boolean {\n        if (ts) {\n            let [tt, dd] = ts.split(',');\n            const val = new Date(`${dd},${tt} UTC`);\n            // val = val.toUTCString();\n            [tt, dd] = this.getTimestamp().substring(1).split(',');\n            const now = new Date();\n            // now = now.toUTCString();\n            const diff = Math.abs((val.getMilliseconds() - now.getMilliseconds()) / 1000);\n            // if (diff > 20 || diff < -40) {\n            if (this.timeout > 0 && diff > this.timeout) {\n                return false;\n            }\n            return true;\n        }\n        return true;\n    }\n\n    /**\n     * SIA Message was not succesfull, create NAK\n     *\n     * @param crcformat crcformat\n     * @returns NAK Message\n     */\n    private nackSIA(crcformat: string): Buffer {\n        const ts = this.getTimestamp(); // tiemstamp\n        const str = `\"NAK\"` + `0000` + `R0` + `L0` + `A0` + `[]${ts}`;\n        const crc = this.crc16str(str);\n        const len = str.length;\n        const crchex = `0000${crc.toString(16)}`.slice(-4).toUpperCase();\n        const lenhex = `0000${len.toString(16)}`.slice(-4).toUpperCase();\n        const start = Buffer.from([0x0a]);\n        const end = Buffer.from([0x0d]);\n        let crcbuf;\n        if (crcformat === 'bin') {\n            /* Lupusec sends in 2 bin instead of 4 hex */\n            crcbuf = Buffer.from([(crc >>> 8) & 0xff, crc & 0xff]);\n            this.adapter.log.debug(`Created NAK : <0x0A><0x${crchex}>${lenhex}${str}<0x0D>`);\n        } else {\n            crcbuf = Buffer.from(crchex);\n            this.adapter.log.debug(`Created NAK : <0x0A>${crchex}${lenhex}${str}<0x0D>`);\n        }\n        const lenbuf = Buffer.from(lenhex);\n        const buf = Buffer.from(str);\n        const nack = Buffer.concat([start, crcbuf, lenbuf, buf, end]);\n        this.adapter.log.debug(`nackSIA : ${JSON.stringify(nack)}`);\n        return nack;\n    }\n\n    /**\n     * get Account from config\n     *\n     * @param act accountnummber\n     * @returns account\n     */\n    private getAcctInfo(act: string): ifaccount {\n        for (let i = 0; i < this.accounts.length; i++) {\n            const key = this.accounts[i];\n            if (key.accountnumber === act) {\n                return key;\n            }\n        }\n        throw new Error(`Acoocunt ${act} unknown. Not found in configuratin!`);\n    }\n\n    /**\n     * Craete Acknowledge for SIA\n     *\n     * @param sia - SIA Message\n     * @returns ack message\n     */\n    private ackSIA(sia: ifsia): any {\n        if (sia) {\n            const ts = this.getTimestamp(); // tiemstamp\n            const cfg = this.getAcctInfo(sia.act);\n            let str = '';\n            this.adapter.log.debug(`ackSIA (cfg) : ${JSON.stringify(cfg)}`);\n            this.adapter.log.debug(`ackSIA (sia) : ${JSON.stringify(sia)}`);\n            if (sia.crc == sia.calc_crc && sia.len == sia.calc_len && cfg && this.isInTime(sia.ts)) {\n                // if (sia.crc == sia.calc_crc && sia.len == sia.calc_len && cfg) {\n                const rpref = sia.rpref && sia.rpref.length > 0 ? `R${sia.rpref}` : '';\n                const lpref = sia.lpref && sia.lpref.length > 0 ? `L${sia.lpref}` : '';\n                if (sia.id[0] == '*') {\n                    const msglen = `|]${ts}`.length;\n                    const padlen = 16 - (msglen % 16);\n                    // let pad = new Buffer(padlen);\n                    const pad = Buffer.alloc(padlen, 0x00);\n                    // let pad = Buffer.alloc(padlen, 0x00);\n                    const msg = this.encrypt_hex(cfg.password, `${pad.toString()}|] ${ts}`);\n                    // const dmsg = this.decrypt_hex(cfg.password, msg); // only for deguging\n                    // const dmsghex = new Buffer(dmsg).toString('hex');\n                    str = `\"*ACK\"${sia.seq}${rpref}${lpref}#${sia.act}[${msg}`;\n                } else {\n                    str = `\"ACK\"${sia.seq}${rpref}${lpref}#${sia.act}[]`;\n                }\n                const crc = this.crc16str(str);\n                const len = str.length;\n                const crchex = `0000${crc.toString(16)}`.slice(-4).toUpperCase();\n                const lenhex = `0000${len.toString(16)}`.slice(-4).toUpperCase();\n                /*\n                let start = new Buffer([0x0a, crc >>> 8 & 0xff, crc & 0xff, len >>> 8 & 0xff, len & 0xff]);\n                let end = new Buffer([0x0d]);\n                let buf = new Buffer(str);\n                let ack = Buffer.concat([start, buf, end]);\n                */\n                const start = Buffer.from([0x0a]);\n                const end = Buffer.from([0x0d]);\n                let crcbuf;\n                if (sia && sia.crcformat === 'bin') {\n                    /* Lupusec sends in 2 bin instead of 4 hex */\n                    crcbuf = Buffer.from([(crc >>> 8) & 0xff, crc & 0xff]);\n                    this.adapter.log.info(`Created ACK : <0x0A><0x${crchex}>${lenhex}${str}<0x0D>`);\n                } else {\n                    crcbuf = Buffer.from(crchex);\n                    this.adapter.log.info(`Created ACK : <0x0A>${crchex}${lenhex}${str}<0x0D>`);\n                }\n                /* let crcbuf = new Buffer(crchex); */\n                /* let crcbuf = new Buffer([crc >>> 8 & 0xff, crc & 0xff]); */\n                const lenbuf = Buffer.from(lenhex);\n                const buf = Buffer.from(str);\n                const ack = Buffer.concat([start, crcbuf, lenbuf, buf, end]);\n\n                this.adapter.log.debug(`ackSIA : ${JSON.stringify(ack)}`);\n                return ack;\n            }\n        }\n        throw new Error(`Could not create ACK for message!`);\n    }\n\n    /**\n     * Convert Byte to Hex String\n     *\n     * @param uint8arr - btyte buffer\n     * @returns conveerted string\n     */\n    private byteToHexString(uint8arr: any): any {\n        if (!uint8arr) {\n            return '';\n        }\n        let hexStr = '';\n        for (let i = 0; i < uint8arr.length; i++) {\n            let hex = (uint8arr[i] & 0xff).toString(16);\n            hex = hex.length === 1 ? `0${hex}` : hex;\n            hexStr += hex;\n        }\n        return hexStr.toUpperCase();\n    }\n\n    /**\n     * SIA CRC Format\n     *\n     * @param data - CRC\n     * @returns crc format\n     */\n    private getcrcFormat(data: any): any {\n        let crcformat = 'hex';\n        if (data) {\n            // Check if CRC 2 Byte Binary or 4 Byte HEX\n            if (data[5] == '0'.charCodeAt(0) && data[9] == '\"'.charCodeAt(0)) {\n                crcformat = 'hex';\n            }\n            // Lupusec sends the CRC in binary forum\n            if (data[3] == '0'.charCodeAt(0) && data[7] == '\"'.charCodeAt(0)) {\n                crcformat = 'bin';\n            }\n        }\n        return crcformat;\n    }\n\n    /**\n     * delete 0x00 at the end of the buffer\n     *\n     * @param data - string buffer\n     * @returns strng without 0x00\n     */\n    private deleteAppendingZero(data: any): string {\n        if (data) {\n            for (let i = data.length - 1; i > 0; i--) {\n                if (data[i] === 0x00) {\n                    data = data.slice(0, i);\n                } else {\n                    break;\n                }\n            }\n        }\n        return data;\n    }\n\n    /**\n     * parse SIA message\n     *\n     * @param data - SIA Message\n     * @returns parsed sia data\n     */\n    private parseSIA_old(data: any): ifsia | undefined {\n        data = this.deleteAppendingZero(data);\n        const sia: any = {};\n        const len = data.length - 1;\n        let str = null;\n        let m = null;\n        let regex = null;\n        if (data && data[0] == 0x0a && data[len] == 0x0d) {\n            sia.data = data; // komplette Nachricht\n            sia.lf = data[0]; // <lf>\n            // Check if CRC 2 Byte Binary or 4 Byte HEX\n            if (data[5] == '0'.charCodeAt(0) && data[9] == '\"'.charCodeAt(0)) {\n                str = Buffer.from(data.subarray(9, len));\n                sia.len = parseInt(data.toString().substring(5, 9), 16);\n                sia.crc = parseInt(data.toString().substring(1, 5), 16);\n                sia.crcformat = 'hex';\n            }\n            // Lupusec sends the CRC in binary forum\n            if (data[3] == '0'.charCodeAt(0) && data[7] == '\"'.charCodeAt(0)) {\n                str = Buffer.from(data.subarray(7, len));\n                sia.len = parseInt(data.toString().substring(3, 7), 16);\n                sia.crc = data[1] * 256 + data[2];\n                sia.crcformat = 'bin';\n            }\n            // Length of Message\n            //tmp = data.toString().substring(3, 7);\n            // let tmp = (data.subarray(3, 7)).toString();\n            // sia.len = parseInt(tmp, 16); // length of data\n            this.adapter.log.debug(`data : ${data}`);\n            sia.cr = data[len]; // <cr>\n            // str = new Buffer((data.subarray(7, len)));\n\n            if (!str) {\n                return undefined;\n            }\n            sia.str = str.toString() || '';\n            sia.calc_len = str.length;\n            sia.calc_crc = this.crc16str(str);\n\n            /*\n            sia.calc_len = sia.str.length;\n            sia.calc_crc = crc16str(sia.str);\n            */\n            const crchex = `0000${sia.crc.toString(16)}`.slice(-4).toUpperCase();\n            const lenhex = `0000${sia.len.toString(16)}`.slice(-4).toUpperCase();\n            if (sia.crcformat === 'bin') {\n                // Lupusec sends in 2 bin instead of 4 hex\n                this.adapter.log.info(`SIA Message : <0x0A><0x${crchex}>${lenhex}${str.toString()}<0x0D>`);\n            } else {\n                this.adapter.log.info(`SIA Message : <0x0A>${crchex}${lenhex}${str.toString()}<0x0D>`);\n            }\n            this.adapter.log.debug(`parseSIA sia.str : ${sia.str}`);\n            if (sia.calc_len != sia.len || sia.calc_crc != sia.crc) {\n                this.adapter.log.info('CRC or Length different to the caclulated values');\n                this.adapter.log.debug(`SIA crc= ${sia.crc}, calc_crc=${sia.calc_crc}`);\n                this.adapter.log.debug(`SIA len= ${sia.len}, calc_len=${sia.calc_len}`);\n                this.adapter.log.debug(`Message for CRC and LEN calculation${sia.str}`);\n                this.adapter.log.debug(`Message for CRC and LEN calculation (String)${sia.str.toString()}`);\n                return undefined;\n                // sia.calc_len = sia.len;\n                // sia.calc_crc = sia.crc;\n            }\n            // Example str:\n            // \"SIA-DCS\"0002R1L232#78919[1234|NFA129][S123Main St., 55123]_11:10:00,10-12-2019\n            // \"SIA-DCS\"0002R1L232#78919[ ][ ]_11:10:00,10-12-2019\n            // \"SIA-DCS\"0266L0#alarm1[alarm2|Nri1OP0001*Familie*]_16:22:03,06-08-2018\n            // https://dc09gen.northlat.com/\n            // \"*SIA-DCS\"9876R579BDFL789ABC#12345A[209c9d400b655df7a26aecb6a887e7ee6ed8103217079aae7cbd9dd7551e96823263460f7ef0514864897ae9789534f1\n            // regex = /\\\"(.+)\\\"(\\d{4})(R(.{1,6})){0,1}(L(.{1,6}))\\#([\\w\\d]+)\\[(.+)/gm; // befor Isue 11\n            // regex = /\\\"(.+)\\\"(\\d{4})(R(.{0,6})){0,1}(L(.{0,6}))\\#([\\w\\d]+)\\[(.+)/gm; // Isue 11\n            regex = /\"(.+)\"(\\d{4})(R(.{0,6})){0,1}(L(.{0,6}))#([\\w\\d]+)\\[(.+)/gm; // Isue 11\n            if ((m = regex.exec(sia.str)) !== null && m.length >= 8) {\n                let lpref = undefined;\n                this.adapter.log.debug(`parseSIA regex   : ${JSON.stringify(sia)}`);\n                sia.id = m[1] || undefined; // id (SIA-DCS, ACK) - required\n                sia.seq = m[2] || undefined; // sqeuence number (0002 or 0003) - required\n                sia.rpref = m[4] || ''; // Receiver Number - optional (R0, R1, R123456)\n                if (m[5] === 'L') {\n                    lpref = 0;\n                }\n                sia.lpref = m[6] || lpref; // Prefix Acount number - required (L0, L1, L1232) - required\n                sia.act = m[7] || undefined; // Acount number - required (1224, ABCD124) - required\n                sia.pad = ''; // Pad\n                let msg: any = m[8] || '';\n                const cfg = this.getAcctInfo(sia.act);\n                if (!cfg) {\n                    this.adapter.log.info(`Could not found entries for accountnumber ${sia.act} in the configuration`);\n                    return undefined;\n                }\n                // if id starts with *, message is encrypted\n                if (sia.id && sia.id[0] == '*') {\n                    if (cfg.aes == true && cfg.password) {\n                        msg = this.decrypt_hex(cfg.password, msg);\n                        if (msg) {\n                            const padlen = msg.indexOf('|');\n                            sia.pad = msg.substring(0, padlen); // len of pad\n                            msg = msg.substring(padlen + 1); // Data Message\n                            this.adapter.log.info(`SIA Message decrypted part: ${msg}`);\n                        } else {\n                            this.adapter.log.info('Could not decrypt message');\n                            return undefined;\n                        }\n                    } else {\n                        this.adapter.log.info(\n                            'Could not decrypt message, because AES encrypting disabled or password is missing',\n                        );\n                        return undefined;\n                    }\n                }\n                if (sia.id && sia.id[0] != '*' && cfg.aes == true) {\n                    this.adapter.log.info('Encrypting enabled, message was sent not entcrypted');\n                    return undefined;\n                }\n                regex = /(.+?)\\](\\[(.*?)\\])?(_(.+)){0,1}/gm;\n                if ((m = regex.exec(msg)) !== null && m.length >= 1) {\n                    sia.data_message = m[1] || ''; // Message\n                    sia.data_extended = m[3] || ''; // extended Message\n                    sia.ts = m[5] || '';\n                }\n            }\n        }\n        this.adapter.log.debug(`parseSIA : ${JSON.stringify(sia)}`);\n        // Test if all required fields will be sent\n        if (sia && sia.id && sia.seq && sia.lpref && sia.act && sia.pad != undefined) {\n            return sia;\n        }\n        this.adapter.log.info('Required SIA fields missing');\n        return undefined;\n    }\n\n    /**\n     * parse SIA message\n     *\n     * @param data - SIA Message\n     * @returns parsed sia data\n     */\n    private parseSIA(data: any): ifsia {\n        data = this.deleteAppendingZero(data);\n        //const sia: any = {};\n        const datalen = data.length - 1;\n        const sia: ifsia = {\n            id: '',\n            seq: '',\n            rpref: undefined,\n            lpref: undefined,\n            act: '',\n            data: undefined,\n            data_message: undefined,\n            data_extended: undefined,\n            ts: undefined,\n            crc: undefined,\n            calc_crc: undefined,\n            calc_len: 0,\n            len: undefined,\n            crcformat: '',\n            lf: undefined,\n            cr: undefined,\n            str: undefined,\n            pad: undefined,\n        };\n        let str = undefined;\n        if (data && data[0] == 0x0a && data[datalen] == 0x0d) {\n            sia.data = data; // komplette Nachricht\n            sia.lf = data[0]; // <lf>\n            // Check if CRC 2 Byte Binary or 4 Byte HEX\n            if (data[5] == '0'.charCodeAt(0) && data[9] == '\"'.charCodeAt(0)) {\n                str = Buffer.from(data.subarray(9, datalen));\n                sia.len = parseInt(data.toString().substring(5, 9), 16);\n                sia.crc = parseInt(data.toString().substring(1, 5), 16);\n                sia.crcformat = 'hex';\n            }\n            // Lupusec sends the CRC in binary forum\n            if (data[3] == '0'.charCodeAt(0) && data[7] == '\"'.charCodeAt(0)) {\n                str = Buffer.from(data.subarray(7, datalen));\n                sia.len = parseInt(data.toString().substring(3, 7), 16);\n                sia.crc = data[1] * 256 + data[2];\n                sia.crcformat = 'bin';\n            }\n            // Length of Message\n            //tmp = data.toString().substring(3, 7);\n            // let tmp = (data.subarray(3, 7)).toString();\n            // sia.len = parseInt(tmp, 16); // length of data\n            this.adapter.log.debug(`data : ${data}`);\n            sia.cr = data[datalen]; // <cr>\n            // str = new Buffer((data.subarray(7, len)));\n\n            if (!str) {\n                throw new Error(`Could not parse SIA message. Message (str) ist empay`);\n            }\n            sia.str = str.toString() || '';\n            sia.calc_len = str.length;\n            sia.calc_crc = this.crc16str(str);\n\n            /*\n              sia.calc_len = sia.str.length;\n              sia.calc_crc = crc16str(sia.str);\n              */\n            const crchex = `0000${sia.crc.toString(16)}`.slice(-4).toUpperCase();\n            const lenhex = `0000${sia.len.toString(16)}`.slice(-4).toUpperCase();\n            if (sia.crcformat === 'bin') {\n                // Lupusec sends in 2 bin instead of 4 hex\n                this.adapter.log.info(`SIA Message : <0x0A><0x${crchex}>${lenhex}${str.toString()}<0x0D>`);\n            } else {\n                this.adapter.log.info(`SIA Message : <0x0A>${crchex}${lenhex}${str.toString()}<0x0D>`);\n            }\n            this.adapter.log.debug(`parseSIA sia.str : ${sia.str}`);\n            if (sia.calc_len != sia.len || sia.calc_crc != sia.crc) {\n                this.adapter.log.info('CRC or Length different to the caclulated values');\n                this.adapter.log.debug(`SIA crc= ${sia.crc}, calc_crc=${sia.calc_crc}`);\n                this.adapter.log.debug(`SIA len= ${sia.len}, calc_len=${sia.calc_len}`);\n                this.adapter.log.debug(`Message for CRC and LEN calculation${sia.str}`);\n                this.adapter.log.debug(`Message for CRC and LEN calculation (String)${sia.str.toString()}`);\n                throw new Error(`Could not parse SIA message. CRC Error!`);\n            }\n            // Example str:\n            // \"SIA-DCS\"0002R1L232#78919[1234|NFA129][S123Main St., 55123]_11:10:00,10-12-2019\n            // \"SIA-DCS\"0002R1L232#78919[ ][ ]_11:10:00,10-12-2019\n            // \"SIA-DCS\"0266L0#alarm1[alarm2|Nri1OP0001*Familie*]_16:22:03,06-08-2018\n            // https://dc09gen.northlat.com/\n            // \"*SIA-DCS\"9876R579BDFL789ABC#12345A[209c9d400b655df7a26aecb6a887e7ee6ed8103217079aae7cbd9dd7551e96823263460f7ef0514864897ae9789534f1\n            // regex = /\\\"(.+)\\\"(\\d{4})(R(.{1,6})){0,1}(L(.{1,6}))\\#([\\w\\d]+)\\[(.+)/gm; // befor Isue 11\n            // regex = /\\\"(.+)\\\"(\\d{4})(R(.{0,6})){0,1}(L(.{0,6}))\\#([\\w\\d]+)\\[(.+)/gm; // Isue 11\n            const regexstr = /\"(.+)\"(\\d{4})(R(.{0,6})){0,1}(L(.{0,6}))#([\\w\\d]+)\\[(.+)/gm; // Isue 11\n            const regexstr_result = regexstr.exec(sia.str);\n            if (regexstr_result && regexstr_result.length >= 8) {\n                let lpref = undefined;\n                this.adapter.log.debug(`parseSIA regex   : ${JSON.stringify(sia)}`);\n                sia.id = regexstr_result[1] || ''; // id (SIA-DCS, ACK) - required\n                sia.seq = regexstr_result[2] || ''; // sqeuence number (0002 or 0003) - required\n                sia.rpref = regexstr_result[4] || ''; // Receiver Number - optional (R0, R1, R123456)\n                if (regexstr_result[5] === 'L') {\n                    lpref = 0;\n                }\n                sia.lpref = regexstr_result[6] || lpref; // Prefix Acount number - required (L0, L1, L1232) - required\n                sia.act = regexstr_result[7] || ''; // Acount number - required (1224, ABCD124) - required\n                sia.pad = ''; // Pad\n                let msg: any = regexstr_result[8] || '';\n                const cfg = this.getAcctInfo(sia.act);\n                if (!cfg) {\n                    throw new Error(\n                        `Could not parse SIA message. Could not found entries for accountnumber ${sia.act} in the configuration`,\n                    );\n                }\n                // if id starts with *, message is encrypted\n                if (sia.id && sia.id[0] == '*') {\n                    if (cfg.aes == true && cfg.password) {\n                        msg = this.decrypt_hex(cfg.password, msg);\n                        if (msg) {\n                            const padlen = msg.indexOf('|');\n                            sia.pad = msg.substring(0, padlen); // len of pad\n                            msg = msg.substring(padlen + 1); // Data Message\n                            this.adapter.log.info(`SIA Message decrypted part: ${msg}`);\n                        } else {\n                            throw new Error(`Could not parse SIA message. Could not decrypt message`);\n                        }\n                    } else {\n                        throw new Error(\n                            `Could not parse SIA message. Could not decrypt message, because AES encrypting disabled or password is missing`,\n                        );\n                    }\n                }\n                if (sia.id && sia.id[0] != '*' && cfg.aes == true) {\n                    throw new Error(`Could not parse SIA message. Encrypting enabled, message was sent not entcrypted`);\n                }\n                const regexmsg = /(.+?)\\](\\[(.*?)\\])?(_(.+)){0,1}/gm;\n                const regexmsg_result = regexmsg.exec(msg);\n                if (regexmsg_result && regexmsg_result.length >= 1) {\n                    sia.data_message = regexmsg_result[1] || ''; // Message\n                    sia.data_extended = regexmsg_result[3] || ''; // extended Message\n                    sia.ts = regexmsg_result[5] || '';\n                }\n            }\n        }\n        this.adapter.log.debug(`parseSIA : ${JSON.stringify(sia)}`);\n        // Test if all required fields will be sent\n        if (sia && sia.id && sia.seq && sia.lpref && sia.act && sia.pad != undefined) {\n            return sia;\n        }\n        throw new Error(`Could not parse SIA message. Required SIA fields missing`);\n    }\n\n    /**\n     * Listen Server TCP\n     */\n    public serverStartTCP(): void {\n        const servertcp = net.createServer(sock => {\n            // See https://nodejs.org/api/stream.html#stream_readable_setencoding_encoding\n            // sock.setEncoding(null);\n            // Hack that must be added to make this work as expected\n            // delete sock._readableState.decoder;\n            const remoteAddress = `${sock.remoteAddress}:${sock.remotePort}`;\n            this.adapter.log.debug(`New client connected: ${remoteAddress}`);\n            sock.on('data', (data: any) => {\n                try {\n                    // data = Buffer.from(data,'binary');\n                    // data = new Buffer(data);\n                    this.adapter.log.debug(`received from ${remoteAddress} following data: ${JSON.stringify(data)}`);\n                    this.adapter.log.info(\n                        `received from ${remoteAddress} following message: ${data.toString().trim()}`,\n                    );\n                    this.emit('data', data);\n                    const sia = this.parseSIA(data);\n                    const ack = this.ackSIA(sia);\n                    // set states only if ACK okay\n                    sock.end(ack);\n                    this.emit('sia', sia, undefined);\n                    this.adapter.log.info(`sending to ${remoteAddress} following message: ${ack.toString().trim()}`);\n                } catch (err) {\n                    const crcformat = this.getcrcFormat(data);\n                    const ack = this.nackSIA(crcformat);\n                    sock.end(ack);\n                    this.emit('sia', undefined, tools.getErrorMessage(err));\n                }\n            });\n            sock.on('close', () => {\n                this.adapter.log.info(`connection from ${remoteAddress} closed`);\n            });\n            sock.on('error', (err: any) => {\n                this.adapter.log.error(`Connection ${remoteAddress} error:  ${tools.getErrorMessage(err)}`);\n            });\n        });\n\n        servertcp.listen(this.port, this.host, () => {\n            const text = `SIA Server listening on IP-Adress (TCP): ${this.host}:${this.port}`;\n            this.adapter.log.info(text);\n        });\n    }\n\n    /**\n     * Listen Server UDP\n     */\n    public serverStartUDP(): void {\n        const serverudp = dgram.createSocket('udp4');\n        serverudp.on('message', (data: any, remote: any) => {\n            try {\n                this.adapter.log.debug(`received from ${remote.address} following data: ${JSON.stringify(data)}`);\n                this.adapter.log.info(`received from ${remote.address} following message: ${data.toString().trim()}`);\n                this.emit('data', data);\n                const sia = this.parseSIA(data);\n                const ack = this.ackSIA(sia);\n                // set states only if ACK okay\n                serverudp.send(ack, 0, ack.length, remote.port, remote.address, (err: any, bytes: any) => {});\n                this.emit('sia', { sia, undefined });\n                this.adapter.log.info(`sending to ${remote.address} following message: ${ack.toString().trim()}`);\n            } catch (err) {\n                const crcformat = this.getcrcFormat(data);\n                const ack = this.nackSIA(crcformat);\n                serverudp.send(ack, 0, ack.length, remote.port, remote.address, (err: any, bytes: any) => {});\n                this.emit('sia', undefined, tools.getErrorMessage(err));\n            }\n        });\n        serverudp.on('close', () => {\n            this.adapter.log.info(`UDP Connection closed`);\n        });\n        serverudp.on('error', (err: any) => {\n            this.adapter.log.error(`UDP Error: ${tools.getErrorMessage(err)}`);\n            serverudp.close();\n        });\n        serverudp.bind(this.port, this.host, () => {\n            const text = `SIA Server listening on IP-Adress (UDP): ${\n                serverudp.address().address\n            }:${serverudp.address().port}`;\n            this.adapter.log.info(text);\n        });\n    }\n\n    /**\n     * CRC Calculation. Example. crc16([0x20, 0x22])\n     *\n     * @param data - string\n     * @returns crc\n     */\n    private crc16(data: any): any {\n        /* CRC table for the CRC-16. The poly is 0x8005 (x^16 + x^15 + x^2 + 1) */\n        const crctab16 = new Uint16Array([\n            0x0000, 0xc0c1, 0xc181, 0x0140, 0xc301, 0x03c0, 0x0280, 0xc241, 0xc601, 0x06c0, 0x0780, 0xc741, 0x0500,\n            0xc5c1, 0xc481, 0x0440, 0xcc01, 0x0cc0, 0x0d80, 0xcd41, 0x0f00, 0xcfc1, 0xce81, 0x0e40, 0x0a00, 0xcac1,\n            0xcb81, 0x0b40, 0xc901, 0x09c0, 0x0880, 0xc841, 0xd801, 0x18c0, 0x1980, 0xd941, 0x1b00, 0xdbc1, 0xda81,\n            0x1a40, 0x1e00, 0xdec1, 0xdf81, 0x1f40, 0xdd01, 0x1dc0, 0x1c80, 0xdc41, 0x1400, 0xd4c1, 0xd581, 0x1540,\n            0xd701, 0x17c0, 0x1680, 0xd641, 0xd201, 0x12c0, 0x1380, 0xd341, 0x1100, 0xd1c1, 0xd081, 0x1040, 0xf001,\n            0x30c0, 0x3180, 0xf141, 0x3300, 0xf3c1, 0xf281, 0x3240, 0x3600, 0xf6c1, 0xf781, 0x3740, 0xf501, 0x35c0,\n            0x3480, 0xf441, 0x3c00, 0xfcc1, 0xfd81, 0x3d40, 0xff01, 0x3fc0, 0x3e80, 0xfe41, 0xfa01, 0x3ac0, 0x3b80,\n            0xfb41, 0x3900, 0xf9c1, 0xf881, 0x3840, 0x2800, 0xe8c1, 0xe981, 0x2940, 0xeb01, 0x2bc0, 0x2a80, 0xea41,\n            0xee01, 0x2ec0, 0x2f80, 0xef41, 0x2d00, 0xedc1, 0xec81, 0x2c40, 0xe401, 0x24c0, 0x2580, 0xe541, 0x2700,\n            0xe7c1, 0xe681, 0x2640, 0x2200, 0xe2c1, 0xe381, 0x2340, 0xe101, 0x21c0, 0x2080, 0xe041, 0xa001, 0x60c0,\n            0x6180, 0xa141, 0x6300, 0xa3c1, 0xa281, 0x6240, 0x6600, 0xa6c1, 0xa781, 0x6740, 0xa501, 0x65c0, 0x6480,\n            0xa441, 0x6c00, 0xacc1, 0xad81, 0x6d40, 0xaf01, 0x6fc0, 0x6e80, 0xae41, 0xaa01, 0x6ac0, 0x6b80, 0xab41,\n            0x6900, 0xa9c1, 0xa881, 0x6840, 0x7800, 0xb8c1, 0xb981, 0x7940, 0xbb01, 0x7bc0, 0x7a80, 0xba41, 0xbe01,\n            0x7ec0, 0x7f80, 0xbf41, 0x7d00, 0xbdc1, 0xbc81, 0x7c40, 0xb401, 0x74c0, 0x7580, 0xb541, 0x7700, 0xb7c1,\n            0xb681, 0x7640, 0x7200, 0xb2c1, 0xb381, 0x7340, 0xb101, 0x71c0, 0x7080, 0xb041, 0x5000, 0x90c1, 0x9181,\n            0x5140, 0x9301, 0x53c0, 0x5280, 0x9241, 0x9601, 0x56c0, 0x5780, 0x9741, 0x5500, 0x95c1, 0x9481, 0x5440,\n            0x9c01, 0x5cc0, 0x5d80, 0x9d41, 0x5f00, 0x9fc1, 0x9e81, 0x5e40, 0x5a00, 0x9ac1, 0x9b81, 0x5b40, 0x9901,\n            0x59c0, 0x5880, 0x9841, 0x8801, 0x48c0, 0x4980, 0x8941, 0x4b00, 0x8bc1, 0x8a81, 0x4a40, 0x4e00, 0x8ec1,\n            0x8f81, 0x4f40, 0x8d01, 0x4dc0, 0x4c80, 0x8c41, 0x4400, 0x84c1, 0x8581, 0x4540, 0x8701, 0x47c0, 0x4680,\n            0x8641, 0x8201, 0x42c0, 0x4380, 0x8341, 0x4100, 0x81c1, 0x8081, 0x4040,\n        ]);\n        let len = data.length;\n        let buffer = 0;\n        let crc = 0;\n        while (len--) {\n            crc = (crc >>> 8) ^ crctab16[(crc ^ data[buffer++]) & 0xff];\n        }\n        return crc;\n        /* return [(crc >>> 8 & 0xff), (crc & 0xff)]; */\n    }\n\n    /**\n     * CRC Calculation. Example. crc16([0x20, 0x22])\n     *\n     * @param str string\n     * @returns crc as sting\n     */\n    private crc16str(str: any): any {\n        return this.crc16(Buffer.from(str));\n    }\n}\n"],
  "mappings": "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MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAChG;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAChG;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAChG;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAChG;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAChG;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAChG;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAChG;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAChG;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAChG;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAChG;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAChG;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAChG;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAChG;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAChG;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAChG;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAChG;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,IACpE,CAAC;AACD,QAAI,MAAM,KAAK;AACf,QAAI,SAAS;AACb,QAAI,MAAM;AACV,WAAO,OAAO;AACV,YAAO,QAAQ,IAAK,UAAU,MAAM,KAAK,QAAQ,KAAK,GAAI;AAAA,IAC9D;AACA,WAAO;AAAA,EAEX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQQ,SAAS,KAAe;AAC5B,WAAO,KAAK,MAAM,OAAO,KAAK,GAAG,CAAC;AAAA,EACtC;AACJ;",
  "names": ["crypto", "sia", "net", "dgram", "err"]
}

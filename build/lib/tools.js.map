{
  "version": 3,
  "sources": ["../../src/lib/tools.ts"],
  "sourcesContent": ["import axios from 'axios';\n// eslint-disable-next-line @typescript-eslint/consistent-type-imports\nimport { NodeSSH, Config as NodeSSHConfig } from 'node-ssh';\n\nexport type sshconfig = NodeSSHConfig;\n\n/**\n * Sleep\n *\n * @param seconds sleep time\n * @returns void\n */\nexport function wait(seconds: number): Promise<void> {\n    return new Promise(resolve => setTimeout(resolve, seconds * 1000));\n}\n\n/**\n * Substr\n *\n * @param text test\n * @param start from\n * @param length length\n * @returns substring\n */\nexport function substr(text: string, start: number, length?: number): string {\n    length = length === undefined || length > text.length ? text.length : length;\n    const retstr = text.substring(start, start + length);\n    return retstr;\n}\n\n/**\n * Checks if a text contains only letters between 0-9, a-f or A-F\n *\n * @param text to check\n * @returns true or false\n */\nexport function isHexString(text: string): boolean {\n    return /^[0-9A-Fa-f]+$/.test(text);\n}\n\n/**\n *\n * @returns guid\n */\nexport function getGuid(): string {\n    function _p8(s: boolean): any {\n        const p = substr(`${Math.random().toString(16)}000000000`, 2, 8);\n        return s ? `-${substr(p, 0, 4)}-${substr(p, 4, 4)}` : p;\n    }\n\n    return `${_p8(false)}${_p8(true)}${_p8(true)}${_p8(false)}`;\n}\n\n/**\n *\n * @param text text mit nummer\n * @returns nummer\n */\nexport function textToNumber(text: string): string {\n    let numb: any = '';\n    if (text) {\n        numb = text.match(/[\\d*#]/g);\n        numb = numb.join('');\n    }\n    return numb;\n}\n\n/**\n * Tests whether the given variable is a real object and not an Array\n *\n * @param it The variable to test\n * @returns if an object\n */\nexport function isObject(it: any): boolean {\n    // This is necessary because:\n    // typeof null === 'object'\n    // typeof [] === 'object'\n    // [] instanceof Object === true\n    return Object.prototype.toString.call(it) === '[object Object]';\n}\n\n/**\n * Tests whether the given variable is really an Array\n *\n * @param it The variable to test\n */\nexport function isArray(it: any): boolean {\n    if (Array.isArray != null) {\n        return Array.isArray(it);\n    }\n    return Object.prototype.toString.call(it) === '[object Array]';\n}\n\n/**\n * Translates text using the Google Translate API\n *\n * @param text The text to translate\n * @param targetLang The target languate\n * @returns string\n */\nexport async function _translateText(text: string, targetLang: string): Promise<string> {\n    if (targetLang === 'en') {\n        return text;\n    }\n    try {\n        const url = `http://translate.googleapis.com/translate_a/single?client=gtx&sl=en&tl=${targetLang}&dt=t&q=${encodeURIComponent(text)}&ie=UTF-8&oe=UTF-8`;\n        const response = await axios({ url, timeout: 5000 });\n        if (isArray(response.data)) {\n            // we got a valid response\n            return response.data[0][0][0];\n        }\n        throw new Error('Invalid response for translate request');\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    } catch (e) {\n        throw new Error(`Could not translate to \"${targetLang}\"`);\n    }\n}\n\n/**\n * Checks OS\n *\n * @returns true if Windows\n */\nexport function isWindow(): boolean {\n    return process.platform.startsWith('win');\n}\n\n/**\n * Adds / to pathname\n *\n * @param path pathname\n * @returns pathname with ending /\n */\nexport function addSlashToPath(path: string): string {\n    if (isWindow() && path?.slice(-1) != '\\\\') {\n        return `${path}\\\\`;\n    }\n    if (!isWindow() && path?.slice(-1) != '/') {\n        return `${path}/`;\n    }\n    return path;\n}\n\n/**\n * Get basename of filename\n *\n * @param filename with ending like test.gsm\n * @returns filename without ending like test\n */\nexport function getFilenameWithoutExtension(filename: string): string {\n    return filename.split('.').slice(0, -1).join('.') || filename;\n}\n\n/**\n * SSH\n *\n * @param srcfile source file\n * @param dstfile destination file\n * @param config configuration file for SSH\n */\nexport async function sendSSH(srcfile: string, dstfile: string, config: sshconfig): Promise<void> {\n    const ssh = new NodeSSH();\n    await ssh.connect(config);\n    await ssh.putFile(srcfile, dstfile);\n}\n\n/**\n * Errormessage\n *\n * @param error error\n * @returns error as message\n */\nexport function getErrorMessage(error: unknown): string {\n    if (error instanceof Error) {\n        return error.message;\n    }\n    return String(error);\n}\n\n/**\n * ompare if propierties of object a exist in  object b\n *\n * @param obja - object 1 for comapring\n * @param objb - object 2 for comparing\n */\nexport function propertiesObjAinObjB(obja: any, objb: any): any {\n    if (obja === objb) {\n        return true;\n    }\n    if (!(obja instanceof Object) || !(objb instanceof Object)) {\n        return false;\n    }\n    if (obja.constructor !== objb.constructor) {\n        return false;\n    }\n    for (const p in obja) {\n        if (!Object.prototype.hasOwnProperty.call(obja, p)) {\n            continue;\n        }\n        if (!Object.prototype.hasOwnProperty.call(objb, p)) {\n            return false;\n        }\n        if (obja[p] === objb[p]) {\n            continue;\n        }\n        if (typeof obja[p] !== 'object') {\n            return false;\n        }\n        if (!propertiesObjAinObjB(obja[p], objb[p])) {\n            return false;\n        } // Objects and Arrays must be tested recursively\n    }\n    return true;\n}\n"],
  "mappings": "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",
  "names": ["axios"]
}
